package ui.main;

import static staticProcess.StaticProcess.*;
import model.Employee;
import service.EmployeeService;
import staticProcess.StaticProcess;
import ui.dialog.Message;
import ui.table.TableCustom;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.time.LocalDate;
import java.time.Period;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
@SuppressWarnings("all")

public class AddEmployee extends JPanel implements ActionListener, MouseListener {
    EmployeeService employeeService = (EmployeeService) Naming.lookup("rmi://" + properties.get("ServerName") + ":" + properties.get("Port") + "/employeeService");
    public AddEmployee() throws MalformedURLException, NotBoundException, RemoteException {
        initComponents();
        TableCustom.apply(scrollPane_tableEmployee, TableCustom.TableType.MULTI_LINE);
        btnAdd.addActionListener(this);
        btnRefresh.addActionListener(this);
        btnUpdate.addActionListener(this);
        tableEmployee.addMouseListener(this);
        setupTable();
        loadTable();

    }

    private void setupTable() {
        JTableHeader theader = tableEmployee.getTableHeader();
        theader.setFont(new java.awt.Font("Segoe UI", 0, 18));
        tableEmployee.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        if (tableEmployee.getColumnModel().getColumnCount() > 0) {
            tableEmployee.getColumnModel().getColumn(0).setPreferredWidth(130);
            tableEmployee.getColumnModel().getColumn(1).setPreferredWidth(240);
            tableEmployee.getColumnModel().getColumn(2).setPreferredWidth(130);
            tableEmployee.getColumnModel().getColumn(3).setPreferredWidth(120);
            tableEmployee.getColumnModel().getColumn(4).setPreferredWidth(89);
            tableEmployee.getColumnModel().getColumn(5).setPreferredWidth(95);
            tableEmployee.getColumnModel().getColumn(6).setPreferredWidth(279);
            tableEmployee.getColumnModel().getColumn(7).setPreferredWidth(319);
            tableEmployee.getColumnModel().getColumn(8).setPreferredWidth(110);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        dateChooser1 = new ui.datechooser.DateChooser();
        pCenter = new JPanel();
        scrollPane_tableEmployee = new JScrollPane();
        tableEmployee = new JTable();
        lbTitlePane = new JLabel();
        lbTitleTable = new JLabel();
        lbBirthDate = new JLabel();
        lbEmplName = new JLabel();
        txtBirthDate = new ui.textfield.TextField();
        txtEmplName = new ui.textfield.TextField();
        txtEmplPhone = new ui.textfield.TextField();
        lblPhone = new JLabel();
        lblGender = new JLabel();
        comboBoxDegree = new ui.combo_suggestion.ComboBoxSuggestion();
        btnAdd = new ui.button.Button();
        lblMail = new JLabel();
        txtMail = new ui.textfield.TextField();
        btnUpdate = new ui.button.Button();
        btnRefresh = new ui.button.Button();
        txtAddress = new ui.textfield.TextField();
        lblAddress = new JLabel();
        comboBoxGender = new ui.combo_suggestion.ComboBoxSuggestion();
        lblDegree = new JLabel();
        lblStatus = new JLabel();
        comboBoxStatus = new ui.combo_suggestion.ComboBoxSuggestion();

        dateChooser1.setForeground(new java.awt.Color(51, 204, 255));
        dateChooser1.setTextRefernce(txtBirthDate);

        setPreferredSize(new java.awt.Dimension(1620, 1000));
        setLayout(new java.awt.BorderLayout());

        pCenter.setBackground(new java.awt.Color(242, 249, 255));
        pCenter.setPreferredSize(new java.awt.Dimension(1600, 1000));

        scrollPane_tableEmployee.setBackground(new java.awt.Color(221, 221, 221));
        scrollPane_tableEmployee.setBorder(null);

        tableEmployee.setBackground(new java.awt.Color(242, 249, 255));
        tableEmployee.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tableEmployee.setModel(new DefaultTableModel(
                new Object [][] {

                },
                new String[]{
                        "Mã nhân viên", "Tên nhân viên", "Số điện thoại", "Ngày sinh", "Giới tính", "Trình độ", "Email", "Địa chỉ","Trạng thái"
                }
        ));
        tableEmployee.setGridColor(new java.awt.Color(218, 247, 249));
        scrollPane_tableEmployee.setViewportView(tableEmployee);

        lbTitlePane.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        lbTitlePane.setForeground(new java.awt.Color(102, 204, 255));
        lbTitlePane.setText("THÊM NHÂN VIÊN");

        lbTitleTable.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lbTitleTable.setForeground(new java.awt.Color(102, 204, 255));
        lbTitleTable.setText("DANH SÁCH NHÂN VIÊN");

        lbBirthDate.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lbBirthDate.setText("Ngày sinh");

        lbEmplName.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lbEmplName.setText("Tên nhân viên");

        txtBirthDate.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtBirthDate.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txtBirthDateActionPerformed(evt);
            }
        });

        txtEmplName.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtEmplName.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txtEmplNameActionPerformed(evt);
            }
        });

        txtEmplPhone.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtEmplPhone.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txtEmplPhoneActionPerformed(evt);
            }
        });

        lblPhone.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblPhone.setText("Số điện thoại");

        lblGender.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblGender.setText("Giới tính");

        comboBoxDegree.setModel(new DefaultComboBoxModel(new String[] { "Cao đẳng", "Đại học","Thạc sĩ","Tiến sĩ" }));
        comboBoxDegree.setSelectedIndex(-1);
        comboBoxDegree.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        btnAdd.setBackground(new java.awt.Color(102, 204, 255));
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setText("Thêm");
        btnAdd.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        lblMail.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblMail.setText("Mail");

        txtMail.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtMail.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txtMailActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(102, 204, 255));
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Cập nhật");
        btnUpdate.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        btnRefresh.setBackground(new java.awt.Color(102, 204, 255));
        btnRefresh.setForeground(new java.awt.Color(255, 255, 255));
        btnRefresh.setText("Làm mới");
        btnRefresh.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        txtAddress.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtAddress.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txtAddressActionPerformed(evt);
            }
        });

        lblAddress.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblAddress.setText("Địa chỉ");

        comboBoxGender.setModel(new DefaultComboBoxModel(new String[] { "Nam", "Nữ" }));
        comboBoxGender.setSelectedIndex(-1);
        comboBoxGender.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        lblDegree.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblDegree.setText("Trình độ");

        lblStatus.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblStatus.setText("Trạng thái");

        comboBoxStatus.setModel(new DefaultComboBoxModel(new String[] { "Đang làm", "Nghỉ làm" }));
        comboBoxStatus.setSelectedIndex(-1);
        comboBoxStatus.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        GroupLayout pCenterLayout = new GroupLayout(pCenter);
        pCenter.setLayout(pCenterLayout);
        pCenterLayout.setHorizontalGroup(
                pCenterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(pCenterLayout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addGroup(pCenterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(GroupLayout.Alignment.TRAILING, pCenterLayout.createSequentialGroup()
                                                .addGroup(pCenterLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                                        .addComponent(scrollPane_tableEmployee)
                                                        .addGroup(pCenterLayout.createSequentialGroup()
                                                                .addGroup(pCenterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                        .addComponent(lbEmplName)
                                                                        .addComponent(lblGender)
                                                                        .addComponent(lblMail))
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addGroup(pCenterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                        .addComponent(txtEmplName, GroupLayout.PREFERRED_SIZE, 480, GroupLayout.PREFERRED_SIZE)
                                                                        .addGroup(pCenterLayout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                                                                .addComponent(txtMail, GroupLayout.PREFERRED_SIZE, 480, GroupLayout.PREFERRED_SIZE)
                                                                                .addGroup(pCenterLayout.createSequentialGroup()
                                                                                        .addComponent(comboBoxGender, GroupLayout.PREFERRED_SIZE, 131, GroupLayout.PREFERRED_SIZE)
                                                                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                        .addComponent(comboBoxStatus, GroupLayout.PREFERRED_SIZE, 205, GroupLayout.PREFERRED_SIZE))))
                                                                .addGap(27, 27, Short.MAX_VALUE)
                                                                .addGroup(pCenterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                        .addComponent(lbBirthDate)
                                                                        .addComponent(lblAddress)
                                                                        .addComponent(lblDegree))
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addGroup(pCenterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                        .addComponent(comboBoxDegree, GroupLayout.PREFERRED_SIZE, 559, GroupLayout.PREFERRED_SIZE)
                                                                        .addGroup(pCenterLayout.createSequentialGroup()
                                                                                .addComponent(txtBirthDate, GroupLayout.PREFERRED_SIZE, 183, GroupLayout.PREFERRED_SIZE)
                                                                                .addGap(18, 18, 18)
                                                                                .addComponent(lblPhone)
                                                                                .addGap(18, 18, 18)
                                                                                .addComponent(txtEmplPhone, GroupLayout.PREFERRED_SIZE, 235, GroupLayout.PREFERRED_SIZE))
                                                                        .addComponent(txtAddress, GroupLayout.PREFERRED_SIZE, 559, GroupLayout.PREFERRED_SIZE))
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                                                                .addGroup(pCenterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                        .addComponent(btnAdd, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 160, GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(btnRefresh, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 160, GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(btnUpdate, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 160, GroupLayout.PREFERRED_SIZE))))
                                                .addGap(52, 52, 52))
                                        .addGroup(GroupLayout.Alignment.TRAILING, pCenterLayout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addGroup(pCenterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addGroup(GroupLayout.Alignment.TRAILING, pCenterLayout.createSequentialGroup()
                                                                .addComponent(lbTitleTable)
                                                                .addGap(643, 643, 643))
                                                        .addGroup(GroupLayout.Alignment.TRAILING, pCenterLayout.createSequentialGroup()
                                                                .addComponent(lbTitlePane)
                                                                .addGap(638, 638, 638))))))
                        .addGroup(pCenterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(pCenterLayout.createSequentialGroup()
                                        .addGap(351, 351, 351)
                                        .addComponent(lblStatus)
                                        .addContainerGap(1190, Short.MAX_VALUE)))
        );
        pCenterLayout.setVerticalGroup(
                pCenterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(pCenterLayout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(lbTitlePane, GroupLayout.PREFERRED_SIZE, 47, GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addGroup(pCenterLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(txtEmplName, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lbEmplName)
                                        .addComponent(lbBirthDate)
                                        .addComponent(txtBirthDate, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnAdd, GroupLayout.PREFERRED_SIZE, 58, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblPhone)
                                        .addComponent(txtEmplPhone, GroupLayout.PREFERRED_SIZE, 61, GroupLayout.PREFERRED_SIZE))
                                .addGap(32, 32, 32)
                                .addGroup(pCenterLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblGender)
                                        .addComponent(comboBoxDegree, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnUpdate, GroupLayout.PREFERRED_SIZE, 58, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(comboBoxGender, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblDegree)
                                        .addComponent(comboBoxStatus, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE))
                                .addGap(35, 35, 35)
                                .addGroup(pCenterLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblMail)
                                        .addComponent(txtMail, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnRefresh, GroupLayout.PREFERRED_SIZE, 58, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtAddress, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblAddress))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                                .addComponent(lbTitleTable)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(scrollPane_tableEmployee, GroupLayout.PREFERRED_SIZE, 530, GroupLayout.PREFERRED_SIZE)
                                .addGap(79, 79, 79))
                        .addGroup(pCenterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(pCenterLayout.createSequentialGroup()
                                        .addGap(218, 218, 218)
                                        .addComponent(lblStatus)
                                        .addContainerGap(803, Short.MAX_VALUE)))
        );

        add(pCenter, java.awt.BorderLayout.CENTER);
    }// </editor-fold>

    private void txtBirthDateActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:

    }

    private void txtEmplPhoneActionPerformed(ActionEvent evt) {

    }

    private void txtEmplNameActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void txtMailActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void txtAddressActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }


    // Variables declaration - do not modify
    private ui.button.Button btnAdd;
    private ui.button.Button btnRefresh;
    private ui.button.Button btnUpdate;
    private ui.combo_suggestion.ComboBoxSuggestion comboBoxGender;
    private ui.combo_suggestion.ComboBoxSuggestion comboBoxStatus;
    private ui.combo_suggestion.ComboBoxSuggestion comboBoxDegree;
    private ui.datechooser.DateChooser dateChooser1;
    private JLabel lbBirthDate;
    private JLabel lbEmplName;
    private JLabel lbTitlePane;
    private JLabel lbTitleTable;
    private JLabel lblAddress;
    private JLabel lblDegree;
    private JLabel lblGender;
    private JLabel lblMail;
    private JLabel lblPhone;
    private JLabel lblStatus;
    private JPanel pCenter;
    private JScrollPane scrollPane_tableEmployee;
    private JTable tableEmployee;
    private ui.textfield.TextField txtAddress;
    private ui.textfield.TextField txtBirthDate;
    private ui.textfield.TextField txtEmplName;
    private ui.textfield.TextField txtEmplPhone;
    private ui.textfield.TextField txtMail;
    private DefaultTableModel model;



    private void loadTable() throws RemoteException {
        ArrayList<Employee> emp = (ArrayList<Employee>) employeeService.getAll();
        DefaultTableModel model = (DefaultTableModel) tableEmployee.getModel();
        for (Employee employee : emp) {
            model.addRow(new Object[]{
                    employee.getEmployeeID(),
                    employee.getEmployeeName(),
                    employee.getPhoneNumber(),
                    employee.getBirthDate(),
                    employee.isGender() ? "Nữ" : "Nam",
                    employee.getDegree(),
                    employee.getEmail(),
                    employee.getAddress(),
                    employee.isStatus() ? "Đang làm" : "Nghỉ làm"
            });
        }
    }

    private boolean checkData() {
        if (txtEmplName.getText().isEmpty() && txtEmplPhone.getText().isEmpty() &&
                comboBoxGender.getSelectedIndex() == -1) {
            new Message(StaticProcess.homePage, true, "Thông báo", "Vui lòng nhập đầy đủ thông tin nhân viên !!!", "src/main/java/ui/dialog/warning.png").showAlert();
            return false;
        }

        // Kiểm tra tên khách hàng
        if (txtEmplName.getText().isEmpty()) {
            new Message(StaticProcess.homePage, true, "Thông báo", "Vui lòng nhập tên nhân viên !!!", "src/main/java/ui/dialog/warning.png").showAlert();
            return false;
        }

        if (txtMail.getText().isEmpty()) {
            new Message(StaticProcess.homePage, true, "Thông báo", "Vui lòng nhập email nhân viên !!!", "src/main/java/ui/dialog/warning.png").showAlert();
            return false;
        }

        // Kiểm tra giới tính
        if (comboBoxGender.getSelectedIndex() == -1) {
            new Message(StaticProcess.homePage, true, "Thông báo", "Vui lòng chọn giới tính nhân viên !!!", "src/main/java/ui/dialog/warning.png").showAlert();
            return false;
        }

        // Kiểm tra trình độ
        if (comboBoxDegree.getSelectedIndex() == -1) {
            new Message(StaticProcess.homePage, true, "Thông báo", "Vui lòng chọn trình độ nhân viên !!!", "src/main/java/ui/dialog/warning.png").showAlert();
            return false;
        }

        // Kiểm tra trạng thái
        if (comboBoxStatus.getSelectedIndex() == -1) {
            new Message(StaticProcess.homePage, true, "Thông báo", "Vui lòng chọn trạng thái làm việc của nhân viên !!!", "src/main/java/ui/dialog/warning.png").showAlert();
            return false;
        }

        // Kiểm tra số điện thoại
        if (txtEmplPhone.getText().isEmpty()) {
            new Message(StaticProcess.homePage, true, "Thông báo", "Số điện thoại nhân viên không được rỗng!!!", "src/main/java/ui/dialog/warning.png").showAlert();
            return false;
        }

        // Kiểm tra tuổi từ ngày sinh
        if (!txtBirthDate.getText().isEmpty()) {
            try {
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                LocalDate birthDate = LocalDate.parse(txtBirthDate.getText().trim(), formatter);
                int age = Period.between(birthDate, LocalDate.now()).getYears();
                if (age < 21) {
                    new Message(StaticProcess.homePage, true, "Thông báo", "Nhân viên phải đủ 21 tuổi !!!", "src/main/java/ui/dialog/warning.png").showAlert();
                    return false;
                }
            } catch (Exception e) {
                new Message(StaticProcess.homePage, true, "Thông báo", "Ngày sinh không hợp lệ !!!", "src/main/java/ui/dialog/warning.png").showAlert();
                return false;
            }
        } else {
            new Message(StaticProcess.homePage, true, "Thông báo", "Vui lòng nhập ngày sinh nhân viên !!!", "src/main/java/ui/dialog/warning.png").showAlert();
            return false;
        }

        return true;
    }


    private void clearData() {
        txtEmplName.setText("");
        txtEmplPhone.setText("");
        txtBirthDate.setText("");
        txtMail.setText("");
        txtAddress.setText("");
        comboBoxGender.setSelectedIndex(-1);
        comboBoxStatus.setSelectedIndex(-1);
        comboBoxDegree.setSelectedIndex(-1);
        tableEmployee.clearSelection();
    }



    @Override
    public void actionPerformed(ActionEvent e) {
        Object obj = e.getSource();
        model = (DefaultTableModel) tableEmployee.getModel();
        if (obj.equals(btnAdd)) {
            if (checkData()) {
                String name = txtEmplName.getText().trim();
                String phone = txtEmplPhone.getText().trim();
                boolean sex = comboBoxGender.getSelectedItem().equals("Nam") ? false : true;
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                LocalDate date = LocalDate.parse(txtBirthDate.getText().trim(), formatter);
                String degree = (String) comboBoxDegree.getSelectedItem();
                String mail = txtMail.getText().trim();
                String address = txtAddress.getText().trim();
                boolean stt = comboBoxStatus.getSelectedItem().equals("Đang làm") ? true : false;
                try {
                    String id = employeeService.createEmployeeID(phone);
                    Employee emp = new Employee();

                    emp.setEmployeeID(id);
                    emp.setEmployeeName(name);
                    emp.setPhoneNumber(phone);
                    emp.setBirthDate(date);
                    emp.setEmail(mail);
                    emp.setAddress(address);
                    emp.setStatus(stt);
                    emp.setDegree(degree);
                    if (employeeService.create(emp)) {
                        new Message(StaticProcess.homePage, true, "Thông báo", "Thêm nhân viên thành công", "src/main/java/ui/dialog/checked.png").showAlert();
                        Object[] row = {id,name, phone, date, sex ? "Nam" : "Nữ", degree, mail, address, stt};
                        model.addRow(row);
                        clearData();

                    }
                } catch (Exception ex) {
                   ex.printStackTrace();
                }
            }
        } else if (obj.equals(btnRefresh)) {
            clearData();

        } else if (obj.equals(btnUpdate)) {
            int row = tableEmployee.getSelectedRow();
            String id = null;
            if (row >= 0) {
                if (checkData()) {
                    String name = txtEmplName.getText().trim();
                    String phone = txtEmplPhone.getText().trim();
                    boolean sex = comboBoxGender.getSelectedItem().equals("Nam") ? false : true;
                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                    LocalDate date = LocalDate.parse(txtBirthDate.getText().trim(), formatter);
                    String degree = (String) comboBoxDegree.getSelectedItem();
                    String mail = txtMail.getText().trim();
                    String address = txtAddress.getText().trim();
                    boolean stt = comboBoxStatus.getSelectedItem().equals("Đang làm")? true : false;
                    id = tableEmployee.getValueAt(row, 0).toString();

                    Employee emp = new Employee();
                    emp.setEmployeeID(id);
                    emp.setEmployeeName(name);
                    emp.setPhoneNumber(phone);
                    emp.setBirthDate(date);
                    emp.setEmail(mail);
                    emp.setAddress(address);
                    emp.setStatus(stt);
                    emp.setDegree(degree);

                    try {
                        if (employeeService.update(emp)) {
                            new Message(StaticProcess.homePage, true, "Thông báo", "Cập nhật nhân viên thành công !!!", "src/main/java/ui/dialog/checked.png").showAlert();
                            model.setValueAt(emp.getEmployeeName(),row, 1);
                            model.setValueAt(emp.getPhoneNumber(),row, 2);
                            model.setValueAt(emp.getBirthDate(),row, 3);
                            model.setValueAt(emp.isGender()?"Nữ":"Nam",row, 4);
                            model.setValueAt(emp.getDegree(),row,5);
                            model.setValueAt(emp.getEmail(),row, 6);
                            model.setValueAt(emp.getAddress(),row, 7);
                            model.setValueAt(emp.isStatus() ? "Đang làm" : "Nghỉ làm", row,8);
                            clearData();

                        }
                    } catch (RemoteException ex) {
                        throw new RuntimeException(ex);
                    }
                }

            } else {
                new Message(StaticProcess.homePage, true, "Thông báo", "Vui lòng chọn nhân viên cần cập nhật", "src/main/java/ui/dialog/warning.png").showAlert();

            }
        }

    }

    @Override
    public void mouseClicked(MouseEvent e) {

    }

    @Override
    public void mousePressed(MouseEvent e) {
        int row = tableEmployee.getSelectedRow();
        if (row >= 0) { // Ensure a row is selected
            DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            DateTimeFormatter outputFormatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");

            txtEmplName.setText(tableEmployee.getValueAt(row, 1).toString());
            txtEmplPhone.setText(tableEmployee.getValueAt(row, 2).toString());

            String birthDateString = tableEmployee.getValueAt(row, 3).toString();

            // Parse the date from the input format
            LocalDate birthDate = LocalDate.parse(birthDateString, inputFormatter);
            // Format the date to the desired output format
            txtBirthDate.setText(birthDate.format(outputFormatter));

            String gender = tableEmployee.getValueAt(row, 4).toString();
            if (gender.equals("Nam")) {
                comboBoxGender.setSelectedIndex(0);
            } else if (gender.equals("Nữ")) {
                comboBoxGender.setSelectedIndex(1);
            }

            String degree = tableEmployee.getValueAt(row, 5).toString();
            if(degree.equals("Cao đẳng")){
                comboBoxDegree.setSelectedIndex(0);
            } else if (degree.equals("Đại học")) {
                comboBoxDegree.setSelectedIndex(1);
            } else if (degree.equals("Thạc sĩ")) {
                comboBoxDegree.setSelectedIndex(2);
            }else{
                comboBoxDegree.setSelectedIndex(3);
            }
            txtMail.setText(tableEmployee.getValueAt(row, 6).toString());
            txtAddress.setText(tableEmployee.getValueAt(row, 7).toString());

            String stt = tableEmployee.getValueAt(row, 8).toString();
            if (stt.equals("Đang làm")) {
                comboBoxStatus.setSelectedIndex(0);
            } else if (stt.equals("Nghỉ làm")) {
                comboBoxStatus.setSelectedIndex(1);
            }
        }

    }

    @Override
    public void mouseReleased(MouseEvent e) {

    }

    @Override
    public void mouseEntered(MouseEvent e) {

    }

    @Override
    public void mouseExited(MouseEvent e) {

    }
// End of variables declaration
}
