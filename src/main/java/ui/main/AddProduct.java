package ui.main;
import model.*;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import service.CategoryService;
import service.ProductService;
import service.ServerService;
import service.VendorService;
import ui.dialog.Message;
import ui.glasspanepupup.GlassPanePopup;
import ui.glasspanepupup.Notification;
import ui.table.TableCustom;
import staticProcess.StaticProcess;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import static staticProcess.StaticProcess.userlogin;
@SuppressWarnings("all")



public class AddProduct extends JPanel {
    ServerService serverService = (ServerService) Naming.lookup("rmi://" + StaticProcess.properties.get("ServerName") + ":" + StaticProcess.properties.get("Port") + "/serverService");
    ProductService productService = (ProductService) Naming.lookup("rmi://" + StaticProcess.properties.get("ServerName") + ":" + StaticProcess.properties.get("Port") + "/productService");
    VendorService vendorService = (VendorService) Naming.lookup("rmi://" + StaticProcess.properties.get("ServerName") + ":" + StaticProcess.properties.get("Port") + "/vendorService");
    CategoryService categoryService = (CategoryService) Naming.lookup("rmi://" + StaticProcess.properties.get("ServerName") + ":" + StaticProcess.properties.get("Port") + "/categoryService");
    //    private final ArrayList<Product> listPd;
    private boolean flag = false;
    ArrayList<Product> temp = new ArrayList<>();

    public boolean isFlag() {
        return flag;
    }



    public AddProduct() throws MalformedURLException, NotBoundException, RemoteException {
//        listPd = new Product_DAO().getProductList();

        initComponents();
        setupTable();
//        setDataTable(tableProduct, listPd);
//        testData(tableProduct);
        TableCustom.apply(jScrollPane_tableProduct, TableCustom.TableType.MULTI_LINE);
        showDataComboBoxCategory();
        showDataComboBoxVendor();
    }

    private void setupTable() {
        JTableHeader theader = tableProduct.getTableHeader();
        theader.setFont(new java.awt.Font("Segoe UI", 0, 18));
        tableProduct.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        if (tableProduct.getColumnModel().getColumnCount() > 0) {
            tableProduct.getColumnModel().getColumn(0).setPreferredWidth(200);
            tableProduct.getColumnModel().getColumn(1).setPreferredWidth(400);
            tableProduct.getColumnModel().getColumn(2).setPreferredWidth(300);
            tableProduct.getColumnModel().getColumn(3).setPreferredWidth(300);
            tableProduct.getColumnModel().getColumn(4).setPreferredWidth(300);
            tableProduct.getColumnModel().getColumn(5).setPreferredWidth(300);
            tableProduct.getColumnModel().getColumn(6).setPreferredWidth(300);
            tableProduct.getColumnModel().getColumn(7).setPreferredWidth(300);
            tableProduct.getColumnModel().getColumn(8).setPreferredWidth(300);
            tableProduct.getColumnModel().getColumn(9).setPreferredWidth(300);
            tableProduct.getColumnModel().getColumn(10).setPreferredWidth(300);

        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new JFileChooser();
        pCenter = new JPanel();
        txtSearch = new ui.textfield.TextField();
        btnAdd = new ui.button.Button();
        btnSave = new ui.button.Button();
        btnLoad = new ui.button.Button();
        cbbCategory = new ui.combobox.Combobox();
        cbbVendor = new ui.combobox.Combobox();
        jScrollPane_tableProduct = new ui.scroll.win11.ScrollPaneWin11();
        tableProduct = new JTable();

        jFileChooser1.setNextFocusableComponent(btnAdd);

        setPreferredSize(new java.awt.Dimension(1620, 1000));
        setLayout(new java.awt.BorderLayout());

        pCenter.setBackground(new java.awt.Color(242, 249, 255));
        pCenter.setPreferredSize(new java.awt.Dimension(1600, 1000));
        pCenter.setRequestFocusEnabled(false);

        txtSearch.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtSearch.setMargin(new java.awt.Insets(3, 6, 3, 6));
        txtSearch.setName(""); // NOI18N
        txtSearch.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });

        btnLoad.setBackground(new java.awt.Color(102, 204, 255));
        btnLoad.setForeground(new java.awt.Color(255, 255, 255));
        btnLoad.setText("Làm mới");
        btnLoad.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnLoad.setIconTextGap(2);
        btnLoad.setPreferredSize(new java.awt.Dimension(64, 64));
        btnLoad.setRound(30);
        btnLoad.setShadowColor(new java.awt.Color(0, 0, 0));
        btnLoad.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        btnAdd.setBackground(new java.awt.Color(102, 204, 255));
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setText("Tải file");
        btnAdd.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnAdd.setIconTextGap(2);
        btnAdd.setPreferredSize(new java.awt.Dimension(64, 64));
        btnAdd.setRound(30);
        btnAdd.setShadowColor(new java.awt.Color(0, 0, 0));
        btnAdd.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    btnAddActionPerformed(evt);
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        btnSave.setBackground(new java.awt.Color(102, 204, 255));
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setText("Lưu");
        btnSave.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnSave.setIconTextGap(2);
        btnSave.setPreferredSize(new java.awt.Dimension(64, 64));
        btnSave.setRound(30);
        btnSave.setShadowColor(new java.awt.Color(0, 0, 0));
        btnSave.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    btnSaveActionPerformed(evt);
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        cbbCategory.setBackground(new java.awt.Color(242, 249, 255));
        cbbCategory.setModel(new DefaultComboBoxModel(new String[]{""}));
        cbbCategory.setSelectedIndex(-1);
        cbbCategory.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cbbCategory.setLabeText("Danh mục");
        cbbVendor.setPreferredSize(new java.awt.Dimension(500, 30));
        cbbCategory.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                searchProduct();
            }
        });

        cbbVendor.setBackground(new java.awt.Color(242, 249, 255));
        cbbVendor.setModel(new DefaultComboBoxModel(new String[]{""}));
        cbbVendor.setSelectedIndex(-1);
        cbbVendor.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cbbVendor.setLabeText("Nhà cung cấp");
        cbbVendor.setPreferredSize(new java.awt.Dimension(350, 30));
        cbbVendor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                searchProduct();
            }
        });

        jScrollPane_tableProduct.setBackground(new java.awt.Color(221, 221, 221));
        jScrollPane_tableProduct.setBorder(null);

        tableProduct.setBackground(new java.awt.Color(242, 249, 255));
        tableProduct.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tableProduct.setModel(new DefaultTableModel(
                new Object[][]{

                },
                new String[]{
                        "Mã sản phẩm", "Tên sản phẩm", "Số đăng ký", "Đơn vị nhập", "Số lượng nhập", "Giá nhập", "Thuế", "Ngày hết hạn", "Nhà cung cấp", "Loại sản phẩm", "Khuyến mãi"
                }
        ));
        tableProduct.setGridColor(new java.awt.Color(218, 247, 249));
        jScrollPane_tableProduct.setViewportView(tableProduct);

        GroupLayout pCenterLayout = new GroupLayout(pCenter);
        pCenter.setLayout(pCenterLayout);
        pCenterLayout.setHorizontalGroup(
                pCenterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(pCenterLayout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addGroup(pCenterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(pCenterLayout.createSequentialGroup()
                                                .addComponent(txtSearch, GroupLayout.PREFERRED_SIZE, 806, GroupLayout.PREFERRED_SIZE)
                                                .addGap(40, 777, Short.MAX_VALUE))
                                        .addGroup(pCenterLayout.createSequentialGroup()
                                                .addGap(6, 6, 6)
                                                .addGroup(pCenterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addGroup(pCenterLayout.createSequentialGroup()
                                                                .addComponent(jScrollPane_tableProduct, GroupLayout.PREFERRED_SIZE, 1549, GroupLayout.PREFERRED_SIZE)
                                                                .addContainerGap(28, Short.MAX_VALUE))
                                                        .addGroup(pCenterLayout.createSequentialGroup()
                                                                .addComponent(cbbCategory, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                                .addGap(107, 107, 107)
                                                                .addComponent(cbbVendor, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(btnLoad, GroupLayout.PREFERRED_SIZE, 115, GroupLayout.PREFERRED_SIZE)
                                                                .addGap(172, 172, 172)
                                                                .addComponent(btnSave, GroupLayout.PREFERRED_SIZE, 87, GroupLayout.PREFERRED_SIZE)
                                                                .addGap(39, 39, 39))))))
                        .addGroup(pCenterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(GroupLayout.Alignment.TRAILING, pCenterLayout.createSequentialGroup()
                                        .addContainerGap(1356, Short.MAX_VALUE)
                                        .addComponent(btnAdd, GroupLayout.PREFERRED_SIZE, 108, GroupLayout.PREFERRED_SIZE)
                                        .addGap(156, 156, 156)))
        );
        pCenterLayout.setVerticalGroup(
                pCenterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(pCenterLayout.createSequentialGroup()
                                .addGroup(pCenterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(pCenterLayout.createSequentialGroup()
                                                .addGap(77, 77, 77)
                                                .addComponent(txtSearch, GroupLayout.PREFERRED_SIZE, 52, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(pCenterLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                        .addComponent(cbbCategory, GroupLayout.PREFERRED_SIZE, 50, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(cbbVendor, GroupLayout.PREFERRED_SIZE, 52, Short.MAX_VALUE))
                                                .addGap(52, 52, 52))
                                        .addGroup(pCenterLayout.createSequentialGroup()
                                                .addGap(77, 77, 77)
                                                .addGroup(pCenterLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                        .addComponent(btnLoad, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(btnSave, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addComponent(jScrollPane_tableProduct, GroupLayout.PREFERRED_SIZE, 690, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(72, Short.MAX_VALUE))
                        .addGroup(pCenterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(pCenterLayout.createSequentialGroup()
                                        .addGap(79, 79, 79)
                                        .addComponent(btnAdd, GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                                        .addGap(862, 862, 862)))
        );

        add(pCenter, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoadActionPerformed(ActionEvent evt) {
        temp = new ArrayList<>();
        setDataTable(tableProduct, temp);
        cbbCategory.setSelectedIndex(-1);
        cbbVendor.setSelectedIndex(-1);
        txtSearch.setText("");
        flag = false;
    }
    private void txtSearchActionPerformed(ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        searchProduct();
    }//GEN-LAST:event_txtSearchActionPerformed

    private void btnAddActionPerformed(ActionEvent evt) throws RemoteException {//GEN-FIRST:event_btnAddActionPerformed
        if (evt.getSource() == btnAdd) {
            if(serverService.getAwaiKey() == false) {
                serverService.setAwaiKey(true);
            } else {
                new Message(StaticProcess.homePage, true, "Thông báo", "Có tài khoản khác đang thực hiện thao tác này. Vui lòng thử lại sau!", "src/main/java/ui/dialog/warning.png").showAlert();
                return;
            }
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Chọn file sản phẩm");

            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

            int result = fileChooser.showOpenDialog(this);

            if (result == JFileChooser.APPROVE_OPTION) {
                String selectedFile = fileChooser.getSelectedFile().getAbsolutePath();
                if (selectedFile.toLowerCase().endsWith(".xlsx")) {
                    temp = loadDataProduct(selectedFile);
                    if (!temp.isEmpty()) {
                        setDataTable(tableProduct, temp);
                        new Message(StaticProcess.homePage, true, "Thông báo", "Đã tải sản phẩm, vui lòng bấm lưu để lưu sản phẩm!", "src/main/java/ui/dialog/checked.png").showAlert();
                        flag = true;
                    }
                } else {
                    new Message(StaticProcess.homePage, true, "Thông báo", "Chỉ hỗ trợ file định dạng xlxs", "src/main/java/ui/dialog/warning.png").showAlert();

                }
            } else {
                serverService.setAwaiKey(false);
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnSaveActionPerformed(ActionEvent evt) throws RemoteException {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        if (flag == false) {
            new Message(StaticProcess.homePage, true, "Thông báo", "Đã lưu, không có gì thay đổi!", "src/main/java/ui/dialog/checked.png").showAlert();

        } else {
            productService.createMultiple(temp);
            temp = new ArrayList<>();
            setDataTable(tableProduct, temp);
            new Message(StaticProcess.homePage, true, "Thông báo", "Danh sách sản phẩm đã được thêm", "src/main/java/ui/dialog/checked.png").showAlert();
            flag = false;
        }
    }//GEN-LAST:event_btnSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ui.button.Button btnAdd;
    private ui.button.Button btnSave;
    private ui.combobox.Combobox cbbCategory;
    private ui.combobox.Combobox cbbVendor;
    private JFileChooser jFileChooser1;
    private JScrollPane jScrollPane_tableProduct;
    private JPanel pCenter;
    private ui.button.Button btnLoad;
    private JTable tableProduct;
    private ui.textfield.TextField txtSearch;
    // End of variables declaration//GEN-END:variables

    /**
     * Load data product from excel file
     * @param path
     * @return
     */
    public ArrayList<Product> loadDataProduct(String path) throws RemoteException {
        ArrayList<Product> listProduct = new ArrayList();

        int xM = 0, xFF = 0, xMS = 0;
        try (FileInputStream fis = new FileInputStream(new File(path));
             Workbook workbook = new XSSFWorkbook(fis)) {

            Sheet sheet = workbook.getSheetAt(0);
            for (Row row : sheet) {
                if (row.getRowNum() == 0) continue;
                String productName = row.getCell(1).getStringCellValue();
                String registrationNumber = row.getCell(2).getStringCellValue();
                int quantityInStock = (int) row.getCell(3).getNumericCellValue();
                double purchasePrice = (double) row.getCell(4).getNumericCellValue();
                double taxPercentage = (double) row.getCell(5).getNumericCellValue();


                LocalDate endDate = row.getCell(6).getDateCellValue()
                        .toInstant()
                        .atZone(ZoneId.systemDefault())
                        .toLocalDate();

                String vendorID = row.getCell(7).getStringCellValue();
                String vendorName = row.getCell(8).getStringCellValue();
                String vendorCountry = row.getCell(9).getStringCellValue();
                String categoryID = row.getCell(10).getStringCellValue();
                String categoryName = row.getCell(12).getStringCellValue();
                String conversionUnit = row.getCell(14).getStringCellValue();
                String noteUnit = row.getCell(20).getStringCellValue();

                Vendor vendor = vendorService.findById(vendorID);
                Category category = categoryService.findById(categoryID);
                switch (row.getCell(11).getStringCellValue()) {
                    case "M": {
                        String activeIngredient = row.getCell(13).getStringCellValue();
                        String administrationID = row.getCell(15).getStringCellValue();
                        String administrationName = row.getCell(16).getStringCellValue();
                        Medicine medicine = new Medicine(productService.getIDProduct("PM", xM), productName, registrationNumber, purchasePrice, taxPercentage, vendor == null ? new Vendor(vendorID, vendorName, null) : vendor, category == null ? new Category(categoryID, categoryName, null) : category, endDate, activeIngredient, conversionUnit, new AdministrationRoute(administrationID, administrationName), noteUnit);
                        medicine.addUnit(PackagingUnit.fromString(conversionUnit), new ProductUnit(calSellPrice(purchasePrice , medicine), quantityInStock));
                        //Các đơn vị còn lại
                        addUnitByString(row.getCell(20).getStringCellValue(), purchasePrice, medicine);
                        xM++;
                        listProduct.add(medicine);
                        break;
                    }
                    case "FF": {
                        String mainNutrients = row.getCell(17).getStringCellValue();
                        String supplementaryIngredients = row.getCell(18).getStringCellValue();
                        FunctionalFood ff = new FunctionalFood(productService.getIDProduct("PF", xFF), productName, registrationNumber, purchasePrice, taxPercentage, vendor == null ? new Vendor(vendorID, vendorName, null) : vendor, category == null ? new Category(categoryID, categoryName, null) : category, endDate, mainNutrients, supplementaryIngredients, noteUnit);
                        xFF++;

                        ff.addUnit(PackagingUnit.fromString(conversionUnit), new ProductUnit(calSellPrice(purchasePrice , ff), quantityInStock));
                        //Các đơn vị còn lại
                        addUnitByString(row.getCell(20).getStringCellValue(), purchasePrice, ff);
                        listProduct.add(ff);
                        break;
                    }
                    case "MS": {
                        String medicalSupplyType = row.getCell(19).getStringCellValue();
                        MedicalSupply ms = new MedicalSupply(productService.getIDProduct("PS", xMS), productName, registrationNumber, purchasePrice, taxPercentage, vendor == null ? new Vendor(vendorID, vendorName, null) : vendor, category == null ? new Category(categoryID, categoryName, null) : category, endDate, medicalSupplyType, noteUnit);
                        xMS++;
                        ms.addUnit(PackagingUnit.fromString(conversionUnit), new ProductUnit(calSellPrice(purchasePrice , ms), quantityInStock));
                        //Các đơn vị còn lại
                        addUnitByString(row.getCell(20).getStringCellValue(), purchasePrice,  ms);
                        listProduct.add(ms);
                        break;
                    }
                    default: {
                        //Xử lý ngoại lệ
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        serverService.setAwaiKey(false);
        return listProduct;
    }

    //Đẩy data lên table
    private void setDataTable(JTable table, ArrayList<Product> listProduct) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
        for (Product product : listProduct) {
            String unitTemp = "";
            int multiplier = 0;
            String[] parts = product.getUnitNote().split(",\\s*");
            for (String part : parts) {
                Pattern pattern = Pattern.compile("([A-Z ]+)(?:\\((\\d+)\\))?");
                Matcher matcher = pattern.matcher(part);

                if (matcher.matches()) {
                    unitTemp = matcher.group(1).trim();
                    multiplier = matcher.group(2) != null ? Integer.parseInt(matcher.group(2)) : 1;
                    break;
                }
            }
            model.addRow(new Object[]{product.getProductID(), product.getProductName(), product.getRegistrationNumber(), unitTemp, multiplier, product.getPurchasePrice() + "", product.getTaxPercentage() + "%", product.getEndDate(), product.getVendor().getVendorID(), product.getCategory().getCategoryID(), product.getPromotion() == null ? "Không có" : product.getPromotion().getPromotionId()});
        }
    }

    /**
     * Thêm các đơn vị còn lại
     */

    public static void addUnitByString(String unitNote, double purchasePrice, Product product){
        String[] parts = unitNote.split(",\\s*");
        int unitTL = 1;
        boolean isFirstUnit = true;
        double priceTL = 1;
        for (String part : parts) {
            Pattern pattern = Pattern.compile("([A-Z_ ]+)(?:\\((\\d+)\\))?");
            Matcher matcher = pattern.matcher(part);

            if (matcher.matches()) {
                String enumName = matcher.group(1).trim();
                int multiplier = matcher.group(2) != null ? Integer.parseInt(matcher.group(2)) : 1;
                if (isFirstUnit) {
                    isFirstUnit = false;
                    unitTL *= multiplier;
                    continue;
                }
                priceTL *= multiplier;
                PackagingUnit unit = PackagingUnit.fromString(enumName);
                double unitPrice = purchasePrice / priceTL;
                int quantity =unitTL * multiplier;
                product.addUnit(unit, new ProductUnit(calSellPrice(unitPrice, product), quantity));
                unitTL *= multiplier;
            }
        }

    }

    private void searchProduct() {
        // Xóa bảng hiện tại và thêm dữ liệu tìm kiếm
        DefaultTableModel model = (DefaultTableModel) tableProduct.getModel();
        model.setRowCount(0); // Xóa các dòng hiện tại

        String category = (String) cbbCategory.getSelectedItem();
        String vendor = (String) cbbVendor.getSelectedItem();
        String search = txtSearch.getText().trim();
        ArrayList<Product> proList = new ArrayList<>();

        // Nếu tất cả đều rỗng
        if ((category == null || category.isEmpty()) && (vendor == null || vendor.isEmpty()) && search.isEmpty()) {
            proList = temp; // Lấy tất cả sản phẩm
        }
        //  Nếu chỉ có `category` không rỗng
        else if (category != null && !category.isEmpty() && (vendor == null || vendor.isEmpty()) && search.isEmpty()) {
//            proList = product_dao.getProductListByCriterious(category, temp); // Lọc theo loại
        }
        // Nếu chỉ có `vendor` không rỗng
        else if ((category == null || category.isEmpty()) && vendor != null && !vendor.isEmpty() && search.isEmpty()) {
            proList = temp; // Lấy tất cả sản phẩm, sau đó lọc theo vendor
            ArrayList<Product> listProByVendor = new ArrayList<>();
            for (Product product : proList) {
                if (product.getVendor().getVendorName().equals(vendor)) {
                    listProByVendor.add(product);
                }
            }
            proList = listProByVendor;
        }
        // Nếu chỉ có `search` không rỗng
        else if ((category == null || category.isEmpty()) && (vendor == null || vendor.isEmpty()) && !search.isEmpty()) {
//            proList = product_dao.getProductListByCriterious(search, temp);
        }
        // Nếu `category` và `vendor` không rỗng, `search` rỗng
        else if (category != null && !category.isEmpty() && vendor != null && !vendor.isEmpty() && search.isEmpty()) {
//            proList = product_dao.getProductListByCriterious(category, temp); // Lọc theo loại
            ArrayList<Product> listProByVendor = new ArrayList<>();
            for (Product product : proList) {
                if (product.getVendor().getVendorName().equals(vendor)) {
                    listProByVendor.add(product);
                }
            }
            proList = listProByVendor;
        }
        // Nếu `category` và `search` không rỗng, `vendor` rỗng
        else if (category != null && !category.isEmpty() && (vendor == null || vendor.isEmpty()) && !search.isEmpty()) {
//            proList = product_dao.getProductListByCriterious(category, temp); // Lọc theo loại
//            ArrayList<Product> listProBySearch = product_dao.getProductListByCriterious(search, proList);
//
//            proList = listProBySearch;
        }
        // Nếu `vendor` và `search` không rỗng, `category` rỗng
        else if ((category == null || category.isEmpty()) && vendor != null && !vendor.isEmpty() && !search.isEmpty()) {
//            proList = product_dao.getProductListByCriterious(vendor, temp); // Lọc theo nhà cung cấp
//            ArrayList<Product> listProBySearch = product_dao.getProductListByCriterious(search, proList);
//
//            proList = listProBySearch;
        }
        // Trường hợp 8: Nếu tất cả đều không rỗng
        else {
//            ArrayList<Product> listProBySearch = product_dao.getProductListByCriterious(search, temp);
//            ArrayList<Product> listProByVendor = new ArrayList<>();
//            for (Product product : listProBySearch) {
//                if (product.getVendor().getVendorName().equals(vendor)) {
//                    listProByVendor.add(product);
//                }
//            }
//            proList = product_dao.getProductListByCriterious(category, listProByVendor);
        }

        // Hiển thị kết quả hoặc thông báo nếu không tìm thấy
        if (proList.isEmpty()) {
            model.addRow(new Object[]{"...", "...", "...", "...", "...", "...", "..."});
        } else {
            setDataTable(tableProduct, proList);
        }
    }

    public void showDataComboBoxVendor() throws RemoteException {

        List<Vendor> list = vendorService.getAll();

        Set<Vendor> uniqueValues = new LinkedHashSet<>(list);
        List<Vendor> uniqueList = new ArrayList<>(uniqueValues);

        for (Vendor vendor : uniqueList) {
            cbbVendor.addItem(vendor.getVendorName());
        }

    }

    public void showDataComboBoxCategory() throws RemoteException {
        List<Category> list = categoryService.getAll();

        Set<Category> uniqueValues = new LinkedHashSet<>(list);
        List<Category> uniqueList = new ArrayList<>(uniqueValues);

        for (Category category : uniqueList) {
            cbbCategory.addItem(category.getCategoryName());
        }
    }

    /**
     * Tinh toán giá bán
     */
    public static double calSellPrice(double purchasePrice, Product p){
        double sellPrice = 0.0;
        if (purchasePrice >= 5000 && purchasePrice < 100000) {
            sellPrice = purchasePrice + 0.1 * purchasePrice + p.getTaxPercentage() * purchasePrice;
        } else if (purchasePrice >= 100000 && purchasePrice < 1000000) {
            sellPrice = purchasePrice + 0.07 * purchasePrice + p.getTaxPercentage() * purchasePrice;
        } else {
            sellPrice = purchasePrice + 0.05 * purchasePrice + p.getTaxPercentage() * purchasePrice;
        }
        return sellPrice;
    }


}
