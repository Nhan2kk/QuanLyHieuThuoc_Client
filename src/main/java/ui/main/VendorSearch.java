package ui.main;

import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;


import model.Vendor;
import service.VendorService;
import staticProcess.StaticProcess;
import ui.table.TableCustom;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;
@SuppressWarnings("all")

public class VendorSearch extends javax.swing.JPanel {

    public VendorSearch() throws MalformedURLException, NotBoundException, RemoteException {
        initComponents();
        vendorDAO = (VendorService) Naming.lookup("rmi://" + StaticProcess.properties.get("ServerName") + ":" + StaticProcess.properties.get("Port") + "/vendorService");
        JTableHeader theader = tableVendor.getTableHeader();
        theader.setFont(new java.awt.Font("Segoe UI", 0, 18));

//        testData(tableVendor);
        TableCustom.apply(scrollPane_tableVendor, TableCustom.TableType.MULTI_LINE);
        cbCountry.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {

            }

            @Override
            public void keyPressed(KeyEvent e) {

            }

            @Override
            public void keyReleased(KeyEvent e) {
                try {
                    searchVendor();
                } catch (RemoteException ex) {
                    throw new RuntimeException(ex);
                }
            }
        });
        txtVendorName.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {

            }

            @Override
            public void keyPressed(KeyEvent e) {

            }

            @Override
            public void keyReleased(KeyEvent e) {
                try {
                    searchVendor();
                } catch (RemoteException ex) {
                    throw new RuntimeException(ex);
                }
            }
        });
    }

//    private void testData(JTable table) {
//        DefaultTableModel model = (DefaultTableModel) table.getModel();
//        model.addRow(new Object[]{ "Nguyễn Văn A", "Việt Nam"});
//        model.addRow(new Object[]{ "Nguyễn Văn B", "Mỹ"});
//        model.addRow(new Object[]{ "Nguyễn Văn C", "Pháp"});
//        model.addRow(new Object[]{ "Nguyễn Văn D", "Hà Lan"});
//        model.addRow(new Object[]{ "Nguyễn Văn E", "Thụy Sĩ"});
//        model.addRow(new Object[]{ "Nguyễn Văn F", "Hàn Quốc"});
//        model.addRow(new Object[]{ "Nguyễn Văn G", "Nhật Bản"});
//        model.addRow(new Object[]{ "Nguyễn Văn H", "Bỉ"});
//        model.addRow(new Object[]{ "Nguyễn Văn I", "Anh"});
//        model.addRow(new Object[]{ "Nguyễn Văn K", "Australia"});
//    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        pCenter = new javax.swing.JPanel();
        scrollPane_tableVendor = new javax.swing.JScrollPane();
        tableVendor = new JTable();
        lbTitlePane = new javax.swing.JLabel();
        lbTitleTable = new javax.swing.JLabel();
        lbCustPhone = new javax.swing.JLabel();
        lbCustName = new javax.swing.JLabel();
        btnSearch = new ui.button.Button();
        txtVendorName = new ui.textfield.TextField();
        cbCountry = new ui.combo_suggestion.ComboBoxSuggestion();

        setPreferredSize(new java.awt.Dimension(1620, 1000));
        setLayout(new java.awt.BorderLayout());

        pCenter.setBackground(new java.awt.Color(242, 249, 255));
        pCenter.setPreferredSize(new java.awt.Dimension(1600, 1000));

        scrollPane_tableVendor.setBackground(new java.awt.Color(221, 221, 221));
        scrollPane_tableVendor.setBorder(null);

        tableVendor.setBackground(new java.awt.Color(221, 221, 221));
        tableVendor.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tableVendor.setModel(new DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                        "Mã nhà cung cấp", "Tên nhà cung cấp", "Quốc gia"
                }
        ));
        tableVendor.setGridColor(new java.awt.Color(218, 247, 249));
        scrollPane_tableVendor.setViewportView(tableVendor);

        lbTitlePane.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        lbTitlePane.setForeground(new java.awt.Color(102, 204, 255));
        lbTitlePane.setText("TÌM KIẾM NHÀ CUNG CẤP");

        lbTitleTable.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lbTitleTable.setForeground(new java.awt.Color(102, 204, 255));
        lbTitleTable.setText("DANH SÁCH NHÀ CUNG CẤP");

        lbCustPhone.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lbCustPhone.setText("Tìm theo tên nhà cung cấp");

        lbCustName.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lbCustName.setText("Tìm theo quốc gia");

        btnSearch.setBackground(new java.awt.Color(51, 204, 255));
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch.setText("Tìm kiếm");
        btnSearch.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        txtVendorName.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        cbCountry.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Anh", "Australia", "Ấn độ", "Bỉ", "Đan Mạch", "Đức", "Hà Lan", "Hàn Quốc", "Ireland", "Mỹ", "Nhật", "Pháp", "Thụy Sĩ", "Trung Quốc", "Việt Nam" }));
        cbCountry.setSelectedIndex(-1);
        cbCountry.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cbCountry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    cbCountryActionPerformed(evt);
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        javax.swing.GroupLayout pCenterLayout = new javax.swing.GroupLayout(pCenter);
        pCenter.setLayout(pCenterLayout);
        pCenterLayout.setHorizontalGroup(
                pCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pCenterLayout.createSequentialGroup()
                                .addContainerGap(81, Short.MAX_VALUE)
                                .addGroup(pCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pCenterLayout.createSequentialGroup()
                                                .addComponent(lbTitlePane)
                                                .addGap(597, 597, 597))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pCenterLayout.createSequentialGroup()
                                                .addComponent(lbTitleTable)
                                                .addGap(640, 640, 640))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pCenterLayout.createSequentialGroup()
                                                .addGroup(pCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addGroup(pCenterLayout.createSequentialGroup()
                                                                .addGroup(pCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(lbCustPhone)
                                                                        .addComponent(txtVendorName, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addGap(122, 122, 122)
                                                                .addGroup(pCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(pCenterLayout.createSequentialGroup()
                                                                                .addComponent(lbCustName)
                                                                                .addGap(0, 648, Short.MAX_VALUE))
                                                                        .addGroup(pCenterLayout.createSequentialGroup()
                                                                                .addComponent(cbCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 555, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                        .addComponent(scrollPane_tableVendor, javax.swing.GroupLayout.PREFERRED_SIZE, 1458, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(75, 75, 75))))
        );
        pCenterLayout.setVerticalGroup(
                pCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pCenterLayout.createSequentialGroup()
                                .addGroup(pCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(pCenterLayout.createSequentialGroup()
                                                .addGap(166, 166, 166)
                                                .addGroup(pCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(lbCustPhone)
                                                        .addComponent(lbCustName)))
                                        .addGroup(pCenterLayout.createSequentialGroup()
                                                .addGap(19, 19, 19)
                                                .addComponent(lbTitlePane, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtVendorName, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(cbCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 96, Short.MAX_VALUE)
                                .addComponent(lbTitleTable)
                                .addGap(18, 18, 18)
                                .addComponent(scrollPane_tableVendor, javax.swing.GroupLayout.PREFERRED_SIZE, 479, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(114, 114, 114))
        );

        add(pCenter, java.awt.BorderLayout.CENTER);
    }// </editor-fold>

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void cbCountryActionPerformed(java.awt.event.ActionEvent evt) throws RemoteException {
        // TODO add your handling code here:
        searchVendor();
    }

    private void searchVendor() throws RemoteException {
        // Xóa bảng hiện tại và thêm dữ liệu tìm kiếm
        DefaultTableModel model = (DefaultTableModel) tableVendor.getModel();
        model.setRowCount(0); // Xóa các dòng hiện tại
        String nameCriteria_txt = txtVendorName.getText().trim();
        String countryCriteria = (String) cbCountry.getSelectedItem();
        String criteria;
        // Xác định tiêu chí tìm kiếm
        if (countryCriteria != null) {
            ArrayList<Vendor> searchResults = (ArrayList<Vendor>) vendorDAO.searchByMultipleCriteria("Vendor", countryCriteria);
            if (searchResults.isEmpty()) {
                model.addRow(new Object[]{"...","...","..."});
                // Tùy chọn: Căn chỉnh cột đầu tiên cho thông báo
            } else {
                loadTable(searchResults);
            }
            if (!nameCriteria_txt.isEmpty()) {
                List<Vendor> searchByCountryAndCri = vendorDAO.getVendorListByCriteriasByCountry(nameCriteria_txt, searchResults);
                model.setRowCount(0);
                if(!searchByCountryAndCri.isEmpty()){
                    loadTable((ArrayList<Vendor>) searchByCountryAndCri);
                }else{
                    model.addRow(new Object[]{"...","...","..."});
                }
            }
        }else{
            ArrayList<Vendor> searchResults = (ArrayList<Vendor>) vendorDAO.searchByMultipleCriteria("Vendor",nameCriteria_txt);
            if (searchResults.isEmpty()) {
                model.addRow(new Object[]{"K...","...","..."});
                // Tùy chọn: Căn chỉnh cột đầu tiên cho thông báo
            } else {
                loadTable(searchResults);
            }

        }

    }
    private void loadTable(ArrayList<Vendor> vendorList){
        DefaultTableModel model = (DefaultTableModel) tableVendor.getModel();
        for (Vendor vendor : vendorList) {
            model.addRow(new Object[]{
                    vendor.getVendorID(),
                    vendor.getVendorName(),
                    vendor.getCountry()
            });
        }
    }

    // Variables declaration - do not modify
    private ui.button.Button btnSearch;
    private ui.combo_suggestion.ComboBoxSuggestion cbCountry;
    private javax.swing.JLabel lbCustName;
    private javax.swing.JLabel lbCustPhone;
    private javax.swing.JLabel lbTitlePane;
    private javax.swing.JLabel lbTitleTable;
    private javax.swing.JPanel pCenter;
    private javax.swing.JScrollPane scrollPane_tableVendor;
    private JTable tableVendor;
    private ui.textfield.TextField txtVendorName;
    private VendorService vendorDAO;
    // End of variables declaration
}