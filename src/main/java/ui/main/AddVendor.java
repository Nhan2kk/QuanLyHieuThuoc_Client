package ui.main;

import model.Vendor;
import service.VendorService;
import staticProcess.StaticProcess;
import ui.dialog.Message;
import ui.table.TableCustom;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.List;
@SuppressWarnings("all")

public class AddVendor extends JPanel implements ActionListener {
    VendorService vendorService = (VendorService)  Naming.lookup("rmi://" + StaticProcess.properties.get("ServerName") + ":" + StaticProcess.properties.get("Port") + "/vendorService");
    public AddVendor() throws MalformedURLException, NotBoundException, RemoteException {
        initComponents();

        JTableHeader theader = tableVendor.getTableHeader();
        theader.setFont(new java.awt.Font("Segoe UI", 0, 18));

//        testData(tableVendor);
        TableCustom.apply(scrollPane_tableVendor, TableCustom.TableType.MULTI_LINE);
        btnAdd.addActionListener(this);

        List<Vendor> list = vendorService.getAll();
        loadTable(list);
    }

    //    private void testData(JTable table) {
//        DefaultTableModel model = (DefaultTableModel) table.getModel();
//        model.addRow(new Object[]{ "Nguyễn Văn A", "Việt Nam"});
//        model.addRow(new Object[]{ "Nguyễn Văn B", "Mỹ"});
//        model.addRow(new Object[]{ "Nguyễn Văn C", "Pháp"});
//        model.addRow(new Object[]{ "Nguyễn Văn D", "Hà Lan"});
//        model.addRow(new Object[]{ "Nguyễn Văn E", "Thụy Sĩ"});
//        model.addRow(new Object[]{ "Nguyễn Văn F", "Hàn Quốc"});
//        model.addRow(new Object[]{ "Nguyễn Văn G", "Nhật Bản"});
//        model.addRow(new Object[]{ "Nguyễn Văn H", "Bỉ"});
//        model.addRow(new Object[]{ "Nguyễn Văn I", "Anh"});
//        model.addRow(new Object[]{ "Nguyễn Văn K", "Australia"});
//    }
    private void loadTable(List<Vendor> vendorList) {
        DefaultTableModel model = (DefaultTableModel) tableVendor.getModel();
        for (Vendor vendor : vendorList) {
            model.addRow(new Object[]{
                    vendor.getVendorID(),
                    vendor.getVendorName(),
                    vendor.getCountry()
            });
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        pCenter = new JPanel();
        scrollPane_tableVendor = new JScrollPane();
        tableVendor = new JTable();
        lbTitlePane = new JLabel();
        lbTitleTable = new JLabel();
        lbVendorName = new JLabel();
        lbCountry = new JLabel();
        btnAdd = new ui.button.Button();
        txtVendorName = new ui.textfield.TextField();
        cbCountry = new ui.combo_suggestion.ComboBoxSuggestion();

        setPreferredSize(new java.awt.Dimension(1620, 1000));
        setLayout(new java.awt.BorderLayout());

        pCenter.setBackground(new java.awt.Color(242, 249, 255));
        pCenter.setPreferredSize(new java.awt.Dimension(1600, 1000));

        scrollPane_tableVendor.setBackground(new java.awt.Color(221, 221, 221));
        scrollPane_tableVendor.setBorder(null);

        tableVendor.setBackground(new java.awt.Color(242, 249, 255));
        tableVendor.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tableVendor.setModel(new DefaultTableModel(
                new Object[][]{

                },
                new String[]{
                        "Mã nhà cung cấp", "Tên nhà cung cấp", "Quốc gia"
                }
        ));
        tableVendor.setGridColor(new java.awt.Color(218, 247, 249));
        scrollPane_tableVendor.setViewportView(tableVendor);

        lbTitlePane.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        lbTitlePane.setForeground(new java.awt.Color(102, 204, 255));
        lbTitlePane.setText("THÔNG TIN NHÀ CUNG CẤP");

        lbTitleTable.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lbTitleTable.setForeground(new java.awt.Color(102, 204, 255));
        lbTitleTable.setText("DANH SÁCH NHÀ CUNG CẤP");

        lbVendorName.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lbVendorName.setText("Tên nhà cung cấp");

        lbCountry.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lbCountry.setText("Quốc gia ");

        btnAdd.setBackground(new java.awt.Color(102, 204, 255));
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setText("Thêm");
        btnAdd.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        txtVendorName.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtVendorName.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txtVendorNameActionPerformed(evt);
            }
        });

        cbCountry.setModel(new DefaultComboBoxModel(new String[]{"Anh", "Australia", "Ấn độ", "Bỉ", "Đan Mạch", "Đức", "Hà Lan", "Hàn Quốc", "Ireland", "Mỹ", "Nhật", "Pháp", "Thụy Sĩ", "Trung Quốc", "Việt Nam"}));
        cbCountry.setSelectedIndex(-1);
        cbCountry.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        GroupLayout pCenterLayout = new GroupLayout(pCenter);
        pCenter.setLayout(pCenterLayout);
        pCenterLayout.setHorizontalGroup(
                pCenterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, pCenterLayout.createSequentialGroup()
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lbTitleTable)
                                .addGap(643, 643, 643))
                        .addGroup(pCenterLayout.createSequentialGroup()
                                .addGroup(pCenterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(pCenterLayout.createSequentialGroup()
                                                .addGap(93, 93, 93)
                                                .addGroup(pCenterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addGroup(pCenterLayout.createSequentialGroup()
                                                                .addGroup(pCenterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                        .addComponent(lbVendorName)
                                                                        .addComponent(lbCountry))
                                                                .addGap(37, 37, 37)
                                                                .addGroup(pCenterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                        .addGroup(pCenterLayout.createSequentialGroup()
                                                                                .addComponent(txtVendorName, GroupLayout.PREFERRED_SIZE, 977, GroupLayout.PREFERRED_SIZE)
                                                                                .addGap(55, 55, 55)
                                                                                .addComponent(btnAdd, GroupLayout.PREFERRED_SIZE, 168, GroupLayout.PREFERRED_SIZE))
                                                                        .addComponent(cbCountry, GroupLayout.PREFERRED_SIZE, 555, GroupLayout.PREFERRED_SIZE)))
                                                        .addComponent(scrollPane_tableVendor, GroupLayout.PREFERRED_SIZE, 1458, GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(pCenterLayout.createSequentialGroup()
                                                .addGap(558, 558, 558)
                                                .addComponent(lbTitlePane, GroupLayout.PREFERRED_SIZE, 500, GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(69, Short.MAX_VALUE))
        );
        pCenterLayout.setVerticalGroup(
                pCenterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(pCenterLayout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(lbTitlePane, GroupLayout.PREFERRED_SIZE, 47, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                                .addGroup(pCenterLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(lbVendorName)
                                        .addComponent(txtVendorName, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnAdd, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE))
                                .addGap(31, 31, 31)
                                .addGroup(pCenterLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(lbCountry)
                                        .addComponent(cbCountry, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE))
                                .addGap(77, 77, 77)
                                .addComponent(lbTitleTable)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(scrollPane_tableVendor, GroupLayout.PREFERRED_SIZE, 530, GroupLayout.PREFERRED_SIZE)
                                .addGap(79, 79, 79))
        );

        add(pCenter, java.awt.BorderLayout.CENTER);
    }// </editor-fold>

    private void txtVendorNameActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }


    // Variables declaration - do not modify
    private ui.button.Button btnAdd;
    private ui.combo_suggestion.ComboBoxSuggestion cbCountry;
    private JLabel lbCountry;
    private JLabel lbTitlePane;
    private JLabel lbTitleTable;
    private JLabel lbVendorName;
    private JPanel pCenter;
    private JScrollPane scrollPane_tableVendor;
    private JTable tableVendor;
    private ui.textfield.TextField txtVendorName;

    @Override
    public void actionPerformed(ActionEvent e) {
        DefaultTableModel model = (DefaultTableModel) tableVendor.getModel();
        Object obj = e.getSource();
        if (obj.equals(btnAdd)) {
            if (checkData()) {
                String vendorName = txtVendorName.getText().trim();
                String country = (String) cbCountry.getSelectedItem();
                String vendorid = null;
                try {
                    vendorid = vendorService.createVendorID(country);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                Vendor vd = new Vendor();
                vd.setVendorID(vendorid);
                vd.setVendorName(vendorName);
                vd.setCountry(country);
                try {
                    if (vendorService.create(vd)) {
                        Object[] row = {
                                vendorid,
                                vendorName,
                                country};
                        model.addRow(row);

                    }
                } catch (RemoteException ex) {
                    throw new RuntimeException(ex);
                }
            }
        }
    }

    private Boolean checkData() {
        if (txtVendorName.getText().isEmpty() && cbCountry.getSelectedItem() == null) {
            new Message(StaticProcess.homePage, true, "Thông báo", "Vui lòng nhập/chọn đầy đủ thông tin", "src/main/java/ui/dialog/warning.png").showAlert();

            return false;
        } else if (cbCountry.getSelectedItem() == null) {
            new Message(StaticProcess.homePage, true, "Thông báo", "Vui lòng chọn quốc gia của nhà cung cấp", "src/main/java/ui/dialog/warning.png").showAlert();

            return false;
        } else if (txtVendorName.getText().isEmpty()) {
            new Message(StaticProcess.homePage, true, "Thông báo", "Vui lòng nhập tên nhà cung cấp", "src/main/java/ui/dialog/warning.png").showAlert();

            return false;
        } else {
            return true;
        }
    }

    // End of variables declaration
}
