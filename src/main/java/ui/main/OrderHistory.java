package ui.main;

import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;


import model.Employee;
import model.Order;
import service.EmployeeService;
import service.OrderService;
import staticProcess.StaticProcess;
import ui.dialog.Message;
import ui.forms.TempOrderForm;
import ui.table.TableCustom;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAdjusters;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@SuppressWarnings("all")

public class OrderHistory extends javax.swing.JPanel {
    EmployeeService employeeService = (EmployeeService) Naming.lookup("rmi://" + StaticProcess.properties.get("ServerName") + ":" + StaticProcess.properties.get("Port") + "/employeeService");
    OrderService orderService = (OrderService) Naming.lookup("rmi://" + StaticProcess.properties.get("ServerName") + ":" + StaticProcess.properties.get("Port") + "/orderService");
    private HomePage homePage;

    ArrayList<Order> listT = (ArrayList<Order>) orderService.getAll();
    String flag1 = "", flag2 = "", flag3 = "";

    public OrderHistory(HomePage homePage) throws MalformedURLException, NotBoundException, RemoteException {
        this.homePage = homePage;
        initComponents();

        JTableHeader theader = tableOrder.getTableHeader();
        theader.setFont(new Font("Segoe UI", 0, 18));
        TableCustom.apply(jScrollPane_tableOrder, TableCustom.TableType.MULTI_LINE);
        showcbbSaler();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        date = new ui.datechooser.DateChooser();
        pCenter = new javax.swing.JPanel();
        txtDate = new ui.textfield.TextField();
        btnCalendar = new ui.button.Button();
        btnAdd = new ui.button.Button();
        btnLoad = new ui.button.Button();
        cbbSaler = new ui.combobox.Combobox();
        cbbTime = new ui.combobox.Combobox();
        cbbMethod = new ui.combobox.Combobox();
        tableScrollButton_Order = new ui.table.TableScrollButton();
        jScrollPane_tableOrder = new javax.swing.JScrollPane();
        tableOrder = new JTable();
        txtSearch = new ui.textfield.TextField();
        btnSearch = new ui.button.Button();
        lblFilter = new javax.swing.JLabel();
        btnPrintOut = new ui.button.Button();

        date.setForeground(new Color(102, 204, 255));
        date.setTextRefernce(txtDate);

        setPreferredSize(new Dimension(1620, 1000));
        setLayout(new BorderLayout());

        pCenter.setBackground(new Color(242, 249, 255));
        pCenter.setPreferredSize(new Dimension(1600, 1000));

        txtDate.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
        txtDate.setMargin(new Insets(3, 6, 3, 6));
        txtDate.setName(""); // NOI18N
        txtDate.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txtDateActionPerformed(evt);
            }
        });

        btnCalendar.setIcon(new javax.swing.ImageIcon("src/main/java/ui/button/calendar.png")); // NOI18N
        btnCalendar.setPreferredSize(new Dimension(64, 64));
        btnCalendar.setRound(20);
        btnCalendar.setShadowColor(new Color(255, 255, 255));
        btnCalendar.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnCalendarActionPerformed(evt);
            }
        });

        btnAdd.setBackground(new Color(102, 204, 255));
        btnAdd.setForeground(new Color(255, 255, 255));
        btnAdd.setText("Tạo hóa đơn");
        btnAdd.setFont(new Font("Segoe UI", 1, 18)); // NOI18N
        btnAdd.setIconTextGap(2);
        btnAdd.setPreferredSize(new Dimension(64, 64));
        btnAdd.setRound(30);
        btnAdd.setShadowColor(new Color(0, 0, 0));
        btnAdd.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnLoad.setBackground(new Color(102, 204, 255));
        btnLoad.setForeground(new Color(255, 255, 255));
        btnLoad.setText("Làm mới");
        btnLoad.setFont(new Font("Segoe UI", 1, 18)); // NOI18N
        btnLoad.setIconTextGap(2);
        btnLoad.setPreferredSize(new Dimension(64, 64));
        btnLoad.setRound(30);
        btnLoad.setShadowColor(new Color(0, 0, 0));
        btnLoad.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    listT = (ArrayList<Order>) orderService.getAll();
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
                // Reset filter
                flag1 = "";
                flag2 = "";
                flag3 = "";
                txtSearch.setText("Nhập tiêu chí ...");
                cbbSaler.setSelectedIndex(0);
                cbbTime.setSelectedIndex(0);
                cbbMethod.setSelectedIndex(0);

                // Load lại toàn bộ không lọc
                showTable(filterOrder(listT, "", "", "", ""));
            }
        });


        cbbSaler.setBackground(new Color(242, 249, 255));
        cbbSaler.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        cbbSaler.setForeground(new Color(102, 102, 102));
        cbbSaler.setModel(new javax.swing.DefaultComboBoxModel(new String[]{""}));
        cbbSaler.setSelectedIndex(-1);
        cbbSaler.setFont(new Font("Segoe UI", 0, 16)); // NOI18N
        cbbSaler.setLabeText("Người bán");
        cbbSaler.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cbbSalerActionPerformed(evt);

            }
        });

        cbbTime.setBackground(new Color(242, 249, 255));
        cbbTime.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        cbbTime.setForeground(new Color(102, 102, 102));
        cbbTime.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"", "Tuần trước", "Tuần này", "Tháng trước", "Tháng này"}));
        cbbTime.setSelectedIndex(-1);
        cbbTime.setFont(new Font("Segoe UI", 0, 16)); // NOI18N
        cbbTime.setLabeText("Thời gian");
        cbbTime.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cbbTimeActionPerformed(evt);
            }
        });

        cbbMethod.setBackground(new Color(242, 249, 255));
        cbbMethod.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        cbbMethod.setForeground(new Color(102, 102, 102));
        cbbMethod.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"", "Theo đơn", "Không theo đơn"}));
        cbbMethod.setSelectedIndex(-1);
        cbbMethod.setFont(new Font("Segoe UI", 0, 16)); // NOI18N
        cbbMethod.setLabeText("Hình thức");
        cbbMethod.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cbbMethodActionPerformed(evt);
            }
        });

        tableOrder.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
        tableOrder.setModel(new DefaultTableModel(
                new Object[][]{

                },
                new String[]{
                        "Mã hóa đơn", "Khách hàng", "Người tạo", "Thời gian", "Hình thức", "Khuyến mãi", "Tổng tiền"
                }
        ) {
            boolean[] canEdit = new boolean[]{
                    false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        jScrollPane_tableOrder.setViewportView(tableOrder);

        tableScrollButton_Order.add(jScrollPane_tableOrder, BorderLayout.CENTER);

        txtSearch.setForeground(new Color(153, 153, 153));
        txtSearch.setText("Nhập tiêu chí ...");
        txtSearch.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
        txtSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSearchFocusGained(evt);
            }

            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSearchFocusLost(evt);
            }
        });
        txtSearch.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                DefaultTableModel model = (DefaultTableModel) tableOrder.getModel();
                ArrayList<Order> list = null;
                try {
                    list = (ArrayList<Order>) orderService.searchByMultipleCriteria("customer", txtSearch.getText().trim());
                } catch (RemoteException ex) {
                    throw new RuntimeException(ex);
                }
                model.setRowCount(0);
                if (!list.isEmpty()) {
                    for (Order o : list) {
                        model.addRow(new Object[]{
                                o.getOrderID(),
                                o.getCustomer().getCustomerName(),
                                o.getEmployee().getEmployeeName(),
                                o.getOrderDate(),
                                o.getPaymentMethod(),
                                o.getDiscount(),
                                o.getTotalDue()
                        });
                    }
                } else {
                    // Hiển thị một hàng thông báo khi không có kết quả
                    model.addRow(new Object[]{"No results found", "", "", "", "", "", ""});
                }
            }
        });

        btnSearch.setBackground(new Color(102, 204, 255));
        btnSearch.setIcon(new javax.swing.ImageIcon("src/main/java/ui/button/magnifying-glass_32.png")); // NOI18N
        btnSearch.setRound(30);
        btnSearch.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                showTable(filterOrder(listT,
                        (String) cbbSaler.getSelectedItem(),
                        (String) cbbTime.getSelectedItem(),
                        (String) cbbMethod.getSelectedItem(),
                        txtSearch.getText().trim()
                ));
            }
        });


        lblFilter.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
        lblFilter.setText("Lọc theo ngày");

        btnPrintOut.setBackground(new Color(102, 204, 255));
        btnPrintOut.setForeground(new Color(255, 255, 255));
        btnPrintOut.setText("Xuất hóa đơn");
        btnPrintOut.setFont(new Font("Segoe UI", 1, 18)); // NOI18N
        btnPrintOut.setRound(30);
        btnPrintOut.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                try {
                    tempOrderForm = new TempOrderForm();
                } catch (MalformedURLException e) {
                    throw new RuntimeException(e);
                } catch (NotBoundException e) {
                    throw new RuntimeException(e);
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
                int row = tableOrder.getSelectedRow();
                if (row >= 0) {
                    Order order = null;
                    try {
                        order = orderService.findById(tableOrder.getValueAt(row, 0).toString());
                    } catch (RemoteException e) {
                        throw new RuntimeException(e);
                    }
                    try {
                        tempOrderForm.invoiceOrder(order);
                    } catch (IOException | NotBoundException e) {
                        throw new RuntimeException(e);
                    }
                } else {
                    new Message(StaticProcess.homePage, true, "Thông báo", "Vui lòng chọn một hóa đơn!!!", "src/main/java/ui/dialog/warning.png").showAlert();
                }
            }
        });


        javax.swing.GroupLayout pCenterLayout = new javax.swing.GroupLayout(pCenter);
        pCenter.setLayout(pCenterLayout);
        pCenterLayout.setHorizontalGroup(
                pCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pCenterLayout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addGroup(pCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(pCenterLayout.createSequentialGroup()
                                                .addComponent(cbbSaler, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(91, 91, 91)
                                                .addComponent(cbbTime, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(86, 86, 86)
                                                .addComponent(cbbMethod, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(pCenterLayout.createSequentialGroup()
                                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(58, 58, 58)
                                                .addComponent(lblFilter)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnCalendar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                                .addComponent(btnPrintOut, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 52, Short.MAX_VALUE))
                        .addGroup(pCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pCenterLayout.createSequentialGroup()
                                        .addContainerGap(22, Short.MAX_VALUE)
                                        .addComponent(tableScrollButton_Order, javax.swing.GroupLayout.PREFERRED_SIZE, 1577, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(21, 21, 21)))
        );
        pCenterLayout.setVerticalGroup(
                pCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pCenterLayout.createSequentialGroup()
                                .addGap(75, 75, 75)
                                .addGroup(pCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(pCenterLayout.createSequentialGroup()
                                                .addGroup(pCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addGroup(pCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                                                                .addComponent(btnPrintOut, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(btnLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                                .addGap(10, 10, 10))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pCenterLayout.createSequentialGroup()
                                                .addGroup(pCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addGroup(pCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(btnCalendar, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGroup(pCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(lblFilter)))
                                                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(15, 15, 15)))
                                .addGroup(pCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(cbbTime, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(cbbMethod, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(cbbSaler, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(801, Short.MAX_VALUE))
                        .addGroup(pCenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(pCenterLayout.createSequentialGroup()
                                        .addGap(226, 226, 226)
                                        .addComponent(tableScrollButton_Order, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap(30, Short.MAX_VALUE)))
        );

        add(pCenter, BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void txtDateActionPerformed(ActionEvent evt) {
        String dateString = txtDate.getText();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");

        try {
            LocalDate localDate = LocalDate.parse(dateString, formatter);
            LocalDateTime startOfDay = localDate.atStartOfDay();
            ArrayList<Order> orderListByDate_txt = orderService.getOrdersByDateRange(startOfDay, startOfDay.plusDays(1).minusNanos(1));
            showTable(orderListByDate_txt);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void btnCalendarActionPerformed(ActionEvent evt) {
//        date.showPopup(); // Hiện popup chọn ngày

        String dateText = txtDate.getText().trim();
        if (dateText.isEmpty() || dateText.equals("Nhập ngày...")) {
            // Nếu chưa nhập ngày thì không làm gì
            return;
        }

        try {
            // Gửi ngày đã convert sang server để tìm kiếm
            String formattedDate = convertDateFormat(dateText); // Giả sử bạn có hàm convert đúng định dạng
            List<Order> orderListByDate = (List<Order>) orderService.searchByMultipleCriteria("order", formattedDate);

            if (orderListByDate != null && !orderListByDate.isEmpty()) {
                showTable(new ArrayList<>(orderListByDate)); // ép List về ArrayList
            } else {
                // Nếu không tìm thấy
                DefaultTableModel model = (DefaultTableModel) tableOrder.getModel();
                model.setRowCount(0);
                model.addRow(new Object[]{"Không tìm thấy hóa đơn", "", "", "", "", "", ""});
            }
        } catch (Exception e) {
            e.printStackTrace();
            // Có lỗi thì cũng clear bảng
            DefaultTableModel model = (DefaultTableModel) tableOrder.getModel();
            model.setRowCount(0);
            model.addRow(new Object[]{"Lỗi khi tìm kiếm", "", "", "", "", "", ""});
        }
    }


    private void btnPrintOutActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void btnAddActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        CreateOrder createOrder = homePage.getCreateOrder();
        homePage.updateCurretPanel(createOrder);

        pCenter.removeAll();

        pCenter.setLayout(new BorderLayout());
        pCenter.add(createOrder, BorderLayout.CENTER);

        pCenter.revalidate();
        pCenter.repaint();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnLoadActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLoadActionPerformed

    private void cbbSalerActionPerformed(ActionEvent evt) {
        flag1 = (String) cbbSaler.getSelectedItem();
        if (countSelectedFilters() == 1) {
            showTable(filterOrder(listT, flag1, flag2, flag3, txtSearch.getText().trim()));
        }
    }


    private void cbbTimeActionPerformed(ActionEvent evt) {
        flag2 = (String) cbbTime.getSelectedItem();
        if (countSelectedFilters() == 1) {
            showTable(filterOrder(listT, flag1, flag2, flag3, txtSearch.getText().trim()));
        }
    }


    private void cbbMethodActionPerformed(ActionEvent evt) {
        flag3 = (String) cbbMethod.getSelectedItem();
        if (countSelectedFilters() == 1) {
            showTable(filterOrder(listT, flag1, flag2, flag3, txtSearch.getText().trim()));
        }
    }


    private void txtSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchFocusGained
        if (txtSearch.getText().equals("Nhập tiêu chí ...")) {
            txtSearch.setText("");
        }
    }

    private void txtSearchFocusLost(java.awt.event.FocusEvent evt) {
        if (txtSearch.getText().equals("")) {
            txtSearch.setText("Nhập tiêu chí ...");
        }
    }

    public void showcbbSaler() throws RemoteException {
        ArrayList<Employee> employeeList = (ArrayList<Employee>) employeeService.getAll();

        for (Employee employee : employeeList) {
            cbbSaler.addItem(employee.getEmployeeName());
        }
    }

    public void showTable(List<Order> arrayList) {
        DefaultTableModel model = (DefaultTableModel) tableOrder.getModel();
        model.setRowCount(0);
        for (Order o : arrayList) {
            model.addRow(new Object[]{
                    o.getOrderID(), o.getCustomer() == null ? "Khách vãng lai" : o.getCustomer().getCustomerName(), o.getEmployee().getEmployeeName(), o.getOrderDate(), o.getPrescription() == null ? "Không kê đơn" : o.getPrescription().getPrescriptionID(), StaticProcess.df.format(o.getDiscount()), StaticProcess.df.format(o.getTotalDue())
            });
        }

    }

    public ArrayList<Order> filterOrder(ArrayList<Order> listOrder, String t1, String t2, String t3, String keyword) {
        ArrayList<Order> listTemp = new ArrayList<>();
        boolean filterByName = (t1 != null && !t1.isEmpty());
        boolean filterByDate = (t2 != null && !t2.isEmpty());
        boolean filterByPrescription = (t3 != null && !t3.isEmpty());
        boolean filterByKeyword = (keyword != null && !keyword.trim().isEmpty() && !keyword.equals("Nhập tiêu chí ..."));

        LocalDateTime startDate = null;
        LocalDateTime endDate = null;

        if (filterByDate) {
            switch (t2) {
                case "Tuần này":
                    startDate = LocalDate.now().with(java.time.DayOfWeek.MONDAY).atStartOfDay();
                    endDate = LocalDate.now().with(java.time.DayOfWeek.SUNDAY).atTime(23, 59, 59);
                    break;
                case "Tuần trước":
                    startDate = LocalDate.now().minusWeeks(1).with(java.time.DayOfWeek.MONDAY).atStartOfDay();
                    endDate = LocalDate.now().minusWeeks(1).with(java.time.DayOfWeek.SUNDAY).atTime(23, 59, 59);
                    break;
                case "Tháng này":
                    startDate = LocalDate.now().with(TemporalAdjusters.firstDayOfMonth()).atStartOfDay();
                    endDate = LocalDate.now().with(TemporalAdjusters.lastDayOfMonth()).atTime(23, 59, 59);
                    break;
                case "Tháng trước":
                    startDate = LocalDate.now().minusMonths(1).with(TemporalAdjusters.firstDayOfMonth()).atStartOfDay();
                    endDate = LocalDate.now().minusMonths(1).with(TemporalAdjusters.lastDayOfMonth()).atTime(23, 59, 59);
                    break;
            }
        }

        for (Order o : listOrder) {
            boolean match = true;

            // Lọc theo tên nhân viên (Saler)
            if (filterByName && (o.getEmployee() == null || !o.getEmployee().getEmployeeName().equalsIgnoreCase(t1))) {
                match = false;
            }

            // Lọc theo thời gian
            if (filterByDate && (o.getOrderDate() == null || o.getOrderDate().isBefore(startDate) || o.getOrderDate().isAfter(endDate))) {
                match = false;
            }

            // Lọc theo hình thức (có đơn/không đơn)
            if (filterByPrescription) {
                boolean hasPrescription = o.getPrescription() != null;
                if (t3.equals("Theo đơn") && !hasPrescription) {
                    match = false;
                } else if (t3.equals("Không theo đơn") && hasPrescription) {
                    match = false;
                }
            }

            // Lọc theo từ khóa (OrderID hoặc CustomerName chứa keyword)
            if (filterByKeyword) {
                String lowerKeyword = keyword.toLowerCase();
                boolean keywordMatch = (o.getOrderID() != null && o.getOrderID().toLowerCase().contains(lowerKeyword))
                        || (o.getCustomer() != null && o.getCustomer().getCustomerName() != null && o.getCustomer().getCustomerName().toLowerCase().contains(lowerKeyword));
                if (!keywordMatch) {
                    match = false;
                }
            }

            if (match) {
                listTemp.add(o);
            }
        }

        return listTemp;
    }

    private int countSelectedFilters() {
        int count = 0;
        if (cbbSaler.getSelectedIndex() > 0) count++;
        if (cbbTime.getSelectedIndex() > 0) count++;
        if (cbbMethod.getSelectedIndex() > 0) count++;
        if (!txtSearch.getText().trim().isEmpty() && !txtSearch.getText().equals("Nhập tiêu chí ...")) count++;
        return count;
    }

    private static String convertDateFormat(String inputDate) {
        SimpleDateFormat inputFormat = new SimpleDateFormat("dd-MM-yyyy");
        SimpleDateFormat outputFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date date;

        try {
            date = inputFormat.parse(inputDate);
            return outputFormat.format(date);
        } catch (ParseException e) {
            e.printStackTrace();
            return null;
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ui.button.Button btnAdd;
    private ui.button.Button btnCalendar;
    private ui.button.Button btnLoad;
    private ui.button.Button btnPrintOut;
    private ui.button.Button btnSearch;
    private ui.combobox.Combobox cbbMethod;
    private ui.combobox.Combobox cbbSaler;
    private ui.combobox.Combobox cbbTime;
    private ui.datechooser.DateChooser date;
    private javax.swing.JLabel lblFilter;
    private javax.swing.JScrollPane jScrollPane_tableOrder;
    private javax.swing.JPanel pCenter;
    private JTable tableOrder;
    private ui.table.TableScrollButton tableScrollButton_Order;
    private ui.textfield.TextField txtDate;
    private ui.textfield.TextField txtSearch;
    private TempOrderForm tempOrderForm;
    // End of variables declaration//GEN-END:variables
}
