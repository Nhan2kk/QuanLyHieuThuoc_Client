package ui.main;


import model.Order;
import service.OrderService;
import ui.model.ModelDataRS;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import ui.chart.ModelChart;

import javax.swing.*;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.Date;
@SuppressWarnings("all")

public class RevenueStatistic extends JPanel implements ActionListener {

    public RevenueStatistic() {
        initComponents();

        curveLineChart1.addLegend("Tất cả", Color.decode("#4A148C"), Color.decode("#BBDEFB")); // Tím đậm -> Xanh nhạt
        curveLineChart1.addLegend("Thuốc", Color.decode("#BF360C"), Color.decode("#FFCCBC")); // Cam đậm -> Cam nhạt
        curveLineChart1.addLegend("Thực phẩm chức năng", Color.decode("#1B5E20"), Color.decode("#C8E6C9")); // Xanh lá đậm -> Xanh lá nhạt
        curveLineChart1.addLegend("Vật tư y tế", Color.decode("#0D47A1"), Color.decode("#90CAF9")); // Xanh biển đậm -> Xanh biển nhạt


        dcStart.setTextRefernce(panelBarStatistical1.txtStart);
        dcEnd.setTextRefernce(panelBarStatistical1.txtEnd);

        cboThongKeTheo.setSelectedIndex(0);
//        btnLamMoi.doClick();
        pgsLoiNhuan.start();
        pgsThuNhapBan.start();
        pgsSanPhamBan.start();
    }

    public void setNameLineChart(String name) {
        curveLineChart1.setTitle(name);
    }

    public void setDataLineChart(ArrayList<ModelDataRS> listMD) {
        for (int i = listMD.size() - 1; i >= 0; i--) {
            ModelDataRS d = listMD.get(i);
            curveLineChart1.addData(new ModelChart(d.getMonth(), new double[]{d.getAll(), d.getRevenueMedicine(), d.getRevenueFunctionalFood(), d.getRevenueMedicalS()}));
        }
        curveLineChart1.start();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        date = new ui.datechooser.DateChooser();
        dcStart = new ui.datechooser.DateChooser();
        dcEnd = new ui.datechooser.DateChooser();
        pCenter = new JPanel();
        pTop = new ui.panel.PanelRound();
        cboThongKeTheo = new ui.combobox.Combobox();
        btnLamMoi = new ui.button.Button();
        panelBarStatistical1 = new ui.custom.PanelBarStatistical();
        btnXuatBaoCao = new ui.button.Button();
        pLineChart = new ui.panel.PanelRound();
        curveLineChart1 = new ui.chart.CurveLineChart();
        pCircleChart = new ui.panel.PanelRound();
        lbTotalProfit = new JLabel();
        lbTotalProduct = new JLabel();
        lbTotalRevenue = new JLabel();
        pgsSanPhamBan = new ui.swing.progress.Progress();
        pgsThuNhapBan = new ui.swing.progress.Progress();
        pgsLoiNhuan = new ui.swing.progress.Progress();
        pRevenueNumber = new ui.panel.PanelRound();
        pTotalRevenue = new ui.panel.PanelRound();
        lbRevenue = new JLabel();
        lbNumberRevenue = new JLabel();
        pCreatedOrder = new ui.panel.PanelRound();
        lbCreatedOrder = new JLabel();
        lbCreatedNumber = new JLabel();
        pSoldProduct = new ui.panel.PanelRound();
        lbSoldProduct = new JLabel();
        lbSoldNumber = new JLabel();

        date.setForeground(new Color(102, 204, 255));

        dcStart.setForeground(new Color(0, 204, 255));

        dcEnd.setForeground(new Color(0, 204, 255));

        setPreferredSize(new java.awt.Dimension(1620, 1000));
        setLayout(new java.awt.BorderLayout());

        pCenter.setBackground(new Color(242, 249, 255));
        pCenter.setPreferredSize(new java.awt.Dimension(1600, 1000));

        pTop.setBackground(new Color(255, 255, 255));
        pTop.setRoundBottomLeft(20);
        pTop.setRoundBottomRight(20);
        pTop.setRoundTopLeft(20);
        pTop.setRoundTopRight(20);

        cboThongKeTheo.setModel(new DefaultComboBoxModel(new String[]{"Năm", "Tháng", "Tùy chỉnh"}));
        cboThongKeTheo.setSelectedIndex(-1);
        cboThongKeTheo.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cboThongKeTheo.setLabeText("Thống kê theo");
        cboThongKeTheo.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cboThongKeTheoActionPerformed(evt);
            }
        });

        btnLamMoi.setBackground(new Color(102, 204, 255));
        btnLamMoi.setForeground(new Color(255, 255, 255));
        btnLamMoi.setText("Làm mới");
        btnLamMoi.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnLamMoi.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnLamMoiActionPerformed(evt);
            }
        });

        btnXuatBaoCao.setBackground(new Color(102, 204, 255));
        btnXuatBaoCao.setForeground(new Color(255, 255, 255));
        btnXuatBaoCao.setText("Xuất báo cáo");
        btnXuatBaoCao.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnXuatBaoCao.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnXuatBaoCaoActionPerformed(evt);
            }
        });

        GroupLayout pTopLayout = new GroupLayout(pTop);
        pTop.setLayout(pTopLayout);
        pTopLayout.setHorizontalGroup(
                pTopLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(pTopLayout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(cboThongKeTheo, GroupLayout.PREFERRED_SIZE, 305, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(panelBarStatistical1, GroupLayout.PREFERRED_SIZE, 729, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnLamMoi, GroupLayout.PREFERRED_SIZE, 208, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(283, Short.MAX_VALUE))
                        .addGroup(pTopLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(GroupLayout.Alignment.TRAILING, pTopLayout.createSequentialGroup()
                                        .addContainerGap(1381, Short.MAX_VALUE)
                                        .addComponent(btnXuatBaoCao, GroupLayout.PREFERRED_SIZE, 208, GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap()))
        );
        pTopLayout.setVerticalGroup(
                pTopLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(pTopLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(pTopLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(pTopLayout.createSequentialGroup()
                                                .addComponent(cboThongKeTheo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 11, Short.MAX_VALUE))
                                        .addGroup(GroupLayout.Alignment.TRAILING, pTopLayout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(btnLamMoi, GroupLayout.PREFERRED_SIZE, 51, GroupLayout.PREFERRED_SIZE))
                                        .addComponent(panelBarStatistical1, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
                        .addGroup(pTopLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(GroupLayout.Alignment.TRAILING, pTopLayout.createSequentialGroup()
                                        .addContainerGap(26, Short.MAX_VALUE)
                                        .addComponent(btnXuatBaoCao, GroupLayout.PREFERRED_SIZE, 51, GroupLayout.PREFERRED_SIZE)
                                        .addGap(5, 5, 5)))
        );

        pLineChart.setBackground(new Color(255, 255, 255));
        pLineChart.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        pLineChart.setRoundBottomLeft(20);
        pLineChart.setRoundBottomRight(20);
        pLineChart.setRoundTopLeft(20);
        pLineChart.setRoundTopRight(20);

        curveLineChart1.setForeground(new Color(51, 51, 51));

        GroupLayout pLineChartLayout = new GroupLayout(pLineChart);
        pLineChart.setLayout(pLineChartLayout);
        pLineChartLayout.setHorizontalGroup(
                pLineChartLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, pLineChartLayout.createSequentialGroup()
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(curveLineChart1, GroupLayout.PREFERRED_SIZE, 1580, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
        pLineChartLayout.setVerticalGroup(
                pLineChartLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, pLineChartLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(curveLineChart1, GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE)
                                .addContainerGap())
        );

        pCircleChart.setBackground(new Color(255, 255, 255));
        pCircleChart.setRoundBottomLeft(30);
        pCircleChart.setRoundBottomRight(30);
        pCircleChart.setRoundTopLeft(39);
        pCircleChart.setRoundTopRight(30);

        lbTotalProfit.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbTotalProfit.setHorizontalAlignment(SwingConstants.CENTER);
        lbTotalProfit.setText("Tổng lợi nhuận");

        lbTotalProduct.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbTotalProduct.setHorizontalAlignment(SwingConstants.CENTER);
        lbTotalProduct.setText("Tổng sản phẩm đã bán");

        lbTotalRevenue.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbTotalRevenue.setHorizontalAlignment(SwingConstants.CENTER);
        lbTotalRevenue.setText("Tổng thu nhập đã bán");

        pgsSanPhamBan.setBackground(new Color(19, 142, 35));
        pgsSanPhamBan.setForeground(new Color(17, 69, 24));
        pgsSanPhamBan.setValue(90);
        pgsSanPhamBan.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N

        pgsThuNhapBan.setBackground(new Color(79, 86, 127));
        pgsThuNhapBan.setForeground(new Color(54, 58, 82));
        pgsThuNhapBan.setValue(80);
        pgsThuNhapBan.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N

        pgsLoiNhuan.setBackground(new Color(10, 132, 183));
        pgsLoiNhuan.setForeground(new Color(5, 97, 136));
        pgsLoiNhuan.setToolTipText("");
        pgsLoiNhuan.setValue(70);
        pgsLoiNhuan.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N

        GroupLayout pCircleChartLayout = new GroupLayout(pCircleChart);
        pCircleChart.setLayout(pCircleChartLayout);
        pCircleChartLayout.setHorizontalGroup(
                pCircleChartLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(pCircleChartLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(pCircleChartLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(lbTotalProduct, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(pgsSanPhamBan, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(20, 20, 20)
                                .addGroup(pCircleChartLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(lbTotalRevenue, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(pgsThuNhapBan, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                                .addGroup(pCircleChartLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(lbTotalProfit, GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                                        .addComponent(pgsLoiNhuan, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(10, 10, 10))
        );
        pCircleChartLayout.setVerticalGroup(
                pCircleChartLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, pCircleChartLayout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addGroup(pCircleChartLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(pgsSanPhamBan, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(pgsThuNhapBan, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(pgsLoiNhuan, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pCircleChartLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(lbTotalProfit)
                                        .addComponent(lbTotalRevenue)
                                        .addComponent(lbTotalProduct))
                                .addContainerGap())
        );

        pRevenueNumber.setBackground(new Color(255, 255, 255));
        pRevenueNumber.setRoundBottomLeft(20);
        pRevenueNumber.setRoundBottomRight(20);
        pRevenueNumber.setRoundTopLeft(20);
        pRevenueNumber.setRoundTopRight(20);

        pTotalRevenue.setBackground(new Color(243, 213, 161));
        pTotalRevenue.setRoundBottomLeft(30);
        pTotalRevenue.setRoundBottomRight(30);
        pTotalRevenue.setRoundTopLeft(30);
        pTotalRevenue.setRoundTopRight(30);

        lbRevenue.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbRevenue.setText("Tổng doanh thu");

        lbNumberRevenue.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        lbNumberRevenue.setText("81.990K");

        GroupLayout pTotalRevenueLayout = new GroupLayout(pTotalRevenue);
        pTotalRevenue.setLayout(pTotalRevenueLayout);
        pTotalRevenueLayout.setHorizontalGroup(
                pTotalRevenueLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(pTotalRevenueLayout.createSequentialGroup()
                                .addContainerGap(117, Short.MAX_VALUE)
                                .addGroup(pTotalRevenueLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(GroupLayout.Alignment.TRAILING, pTotalRevenueLayout.createSequentialGroup()
                                                .addComponent(lbNumberRevenue)
                                                .addGap(98, 98, 98))
                                        .addGroup(GroupLayout.Alignment.TRAILING, pTotalRevenueLayout.createSequentialGroup()
                                                .addComponent(lbRevenue)
                                                .addGap(76, 76, 76))))
        );
        pTotalRevenueLayout.setVerticalGroup(
                pTotalRevenueLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(pTotalRevenueLayout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addComponent(lbRevenue)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                                .addComponent(lbNumberRevenue)
                                .addGap(72, 72, 72))
        );

        pCreatedOrder.setBackground(new Color(168, 194, 211));
        pCreatedOrder.setPreferredSize(new java.awt.Dimension(459, 116));
        pCreatedOrder.setRoundBottomLeft(30);
        pCreatedOrder.setRoundBottomRight(30);
        pCreatedOrder.setRoundTopLeft(20);
        pCreatedOrder.setRoundTopRight(30);

        lbCreatedOrder.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbCreatedOrder.setText("Hóa đơn đã tạo");

        lbCreatedNumber.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        lbCreatedNumber.setText("3999");

        GroupLayout pCreatedOrderLayout = new GroupLayout(pCreatedOrder);
        pCreatedOrder.setLayout(pCreatedOrderLayout);
        pCreatedOrderLayout.setHorizontalGroup(
                pCreatedOrderLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(pCreatedOrderLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lbCreatedOrder, GroupLayout.PREFERRED_SIZE, 263, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                                .addComponent(lbCreatedNumber)
                                .addGap(17, 17, 17))
        );
        pCreatedOrderLayout.setVerticalGroup(
                pCreatedOrderLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(pCreatedOrderLayout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(pCreatedOrderLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(lbCreatedNumber)
                                        .addComponent(lbCreatedOrder))
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pSoldProduct.setBackground(new Color(178, 198, 197));
        pSoldProduct.setPreferredSize(new java.awt.Dimension(459, 116));
        pSoldProduct.setRoundBottomLeft(30);
        pSoldProduct.setRoundBottomRight(30);
        pSoldProduct.setRoundTopLeft(30);
        pSoldProduct.setRoundTopRight(30);

        lbSoldProduct.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbSoldProduct.setText("Sản phẩm bán ra");

        lbSoldNumber.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        lbSoldNumber.setText("8170");

        GroupLayout pSoldProductLayout = new GroupLayout(pSoldProduct);
        pSoldProduct.setLayout(pSoldProductLayout);
        pSoldProductLayout.setHorizontalGroup(
                pSoldProductLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(pSoldProductLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lbSoldProduct)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lbSoldNumber)
                                .addGap(18, 18, 18))
        );
        pSoldProductLayout.setVerticalGroup(
                pSoldProductLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(pSoldProductLayout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(pSoldProductLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(lbSoldProduct)
                                        .addComponent(lbSoldNumber, GroupLayout.PREFERRED_SIZE, 54, GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(40, Short.MAX_VALUE))
        );

        GroupLayout pRevenueNumberLayout = new GroupLayout(pRevenueNumber);
        pRevenueNumber.setLayout(pRevenueNumberLayout);
        pRevenueNumberLayout.setHorizontalGroup(
                pRevenueNumberLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(pRevenueNumberLayout.createSequentialGroup()
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(pRevenueNumberLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(pCreatedOrder, GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
                                        .addComponent(pSoldProduct, GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pTotalRevenue, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39))
        );
        pRevenueNumberLayout.setVerticalGroup(
                pRevenueNumberLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(pRevenueNumberLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(pTotalRevenue, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                        .addGroup(pRevenueNumberLayout.createSequentialGroup()
                                .addComponent(pCreatedOrder, GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                                .addGap(0, 0, 0)
                                .addComponent(pSoldProduct, GroupLayout.PREFERRED_SIZE, 133, GroupLayout.PREFERRED_SIZE))
        );

        GroupLayout pCenterLayout = new GroupLayout(pCenter);
        pCenter.setLayout(pCenterLayout);
        pCenterLayout.setHorizontalGroup(
                pCenterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(pCenterLayout.createSequentialGroup()
                                .addGap(0, 0, 0)
                                .addGroup(pCenterLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addComponent(pLineChart, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(pCenterLayout.createSequentialGroup()
                                                .addGroup(pCenterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addComponent(pTop, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(pCenterLayout.createSequentialGroup()
                                                                .addComponent(pCircleChart, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(pRevenueNumber, GroupLayout.PREFERRED_SIZE, 831, GroupLayout.PREFERRED_SIZE)))
                                                .addGap(5, 5, 5))))
        );
        pCenterLayout.setVerticalGroup(
                pCenterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(pCenterLayout.createSequentialGroup()
                                .addGap(0, 0, 0)
                                .addComponent(pTop, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addGroup(pCenterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(pCircleChart, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(pRevenueNumber, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, 0)
                                .addComponent(pLineChart, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );

        add(pCenter, java.awt.BorderLayout.CENTER);
        panelBarStatistical1.btnSelectStart.addActionListener(this);
        panelBarStatistical1.btnSelectEnd.addActionListener(this);
        btnLamMoi.addActionListener(this);

    }// </editor-fold>//GEN-END:initComponents

    private void cboThongKeTheoActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cboThongKeTheoActionPerformed
        if ((cboThongKeTheo.getSelectedItem()).equals("Năm")) {
            panelBarStatistical1.pnlThongKeNam.setVisible(true);
            panelBarStatistical1.pnlThongKeTheoThang.setVisible(false);
            panelBarStatistical1.pnlThongKeTuyChinh.setVisible(false);
        } else if ((cboThongKeTheo.getSelectedItem()).equals("Tháng")) {
            panelBarStatistical1.pnlThongKeNam.setVisible(false);
            panelBarStatistical1.pnlThongKeTheoThang.setVisible(true);
            panelBarStatistical1.pnlThongKeTuyChinh.setVisible(false);
        } else if ((cboThongKeTheo.getSelectedItem()).equals("Tùy chỉnh")) {
            panelBarStatistical1.pnlThongKeNam.setVisible(false);
            panelBarStatistical1.pnlThongKeTheoThang.setVisible(false);
            panelBarStatistical1.pnlThongKeTuyChinh.setVisible(true);
        }
    }//GEN-LAST:event_cboThongKeTheoActionPerformed

    private void btnLamMoiActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnLamMoiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLamMoiActionPerformed

    private void btnXuatBaoCaoActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnXuatBaoCaoActionPerformed
        String namefile = "Report_RevenueStatistic_";
        switch ((String)cboThongKeTheo.getSelectedItem()) {
            case "Năm":
                namefile+= (Integer) panelBarStatistical1.ycNam.getValue();
                break;
            case "Tháng":
                namefile = namefile + panelBarStatistical1.cboT.getSelectedItem() + ", " + (Integer) panelBarStatistical1.ycT.getValue();
                break;
            case "Tùy chỉnh":
                namefile = namefile + panelBarStatistical1.txtStart.getText() + " to " + panelBarStatistical1.txtEnd.getText();
                break;
        }

        String path = ExcelFileChooser.getObject().chooseExcelFileSavePath(namefile);
        if (path != null) {
            try (FileInputStream fis = new FileInputStream("src/main/java/ui/custom/Report_RevenueStatistic.xlsx");
                 Workbook workbook = new XSSFWorkbook(fis)) {
                Sheet sheet = null;
                OrderService orderDAO = ((OrderService) Naming.lookup("rmi://" + staticProcess.StaticProcess.properties.get("ServerName") + ":" + staticProcess.StaticProcess.properties.get("Port") + "/orderService"));
                ArrayList<Double> inf = new ArrayList<>();
                ArrayList<ModelDataRS> listMD = new ArrayList<>();
                switch ((String) cboThongKeTheo.getSelectedItem()) {
                    case "Năm":
                        sheet = workbook.getSheetAt(0);
                        Row row1 = sheet.getRow(0);
                        if (row1 == null) row1 = sheet.createRow(0);
                        Cell cellB1 = row1.getCell(1);
                        if (cellB1 == null) cellB1 = row1.createCell(1);
                        cellB1.setCellValue("THỐNG KÊ DOANH THU NĂM " + (Integer) panelBarStatistical1.ycNam.getValue());


                        inf = orderDAO.getOverviewStatistical(
                                LocalDate.of((Integer) (Integer) panelBarStatistical1.ycNam.getValue(), 1, 1).atStartOfDay(),
                                LocalDate.of((Integer) (Integer) panelBarStatistical1.ycNam.getValue(), 12, 31).atTime(23, 59, 59)
                        );
                        listMD = orderDAO.getModelDataRSByYear((Integer) (Integer) panelBarStatistical1.ycNam.getValue());
                        break;
                    case "Tháng":
                        sheet = workbook.getSheetAt(0);
                        Row rowa = sheet.getRow(0);
                        if (rowa == null) row1 = sheet.createRow(0);
                        Cell cellBa = rowa.getCell(1);
                        if (cellBa == null) cellBa = rowa.createCell(1);

                        String[] parts = ((String) panelBarStatistical1.cboT.getSelectedItem()).split(" ");
                        int month = 1;
                        if (parts.length > 1) {
                            month = Integer.parseInt(parts[1]);
                        }
                        cellBa.setCellValue("THỐNG KÊ DOANH THU THÁNG " + month + " NĂM " + (Integer) panelBarStatistical1.ycNam.getValue());
                        LocalDate firstDayOfMonth = LocalDate.of((Integer) (Integer) panelBarStatistical1.ycT.getValue(), month, 1);

                        inf = orderDAO.getOverviewStatistical(
                                firstDayOfMonth.atStartOfDay(),
                                firstDayOfMonth.withDayOfMonth(firstDayOfMonth.lengthOfMonth()).atTime(23, 59, 59)
                        );
                        listMD = orderDAO.getModelDataRSByYearByMonth(month, (Integer) (Integer) panelBarStatistical1.ycT.getValue());
                        break;
                    case "Tùy chỉnh":
                        sheet = workbook.getSheetAt(0);
                        Row rowtc = sheet.getRow(0);
                        if (rowtc == null) row1 = sheet.createRow(0);
                        Cell cellBtc = rowtc.getCell(1);
                        if (cellBtc == null) cellBtc = rowtc.createCell(1);
                        cellBtc.setCellValue("THỐNG KÊ DOANH THU TỪ  " + panelBarStatistical1.txtStart.getText() + " ĐẾN " + panelBarStatistical1.txtStart.getText());


                        inf =orderDAO.getOverviewStatistical(
                                convertStringToLocalDate(panelBarStatistical1.txtStart.getText()).atStartOfDay(),
                                convertStringToLocalDate(panelBarStatistical1.txtEnd.getText()).atTime(23, 59, 59)
                        );
                            listMD = orderDAO.getModelDataRSByYearByTime(convertStringToLocalDate(panelBarStatistical1.txtStart.getText()).atStartOfDay(), convertStringToLocalDate(panelBarStatistical1.txtEnd.getText()).atTime(23, 59, 59));
                        break;
                }

                Row row2 = sheet.getRow(2);
                if (row2 == null) row2 = sheet.createRow(2);
                Cell cellB2 = row2.getCell(3);
                if (cellB2 == null) cellB2 = row2.createCell(3);
                cellB2.setCellValue(inf.get(0).intValue());

                Row row3 = sheet.getRow(3);
                if (row3 == null) row3 = sheet.createRow(3);
                Cell cellB3 = row3.getCell(3); // Cột D
                if (cellB3 == null) cellB3 = row3.createCell(3);
                cellB3.setCellValue(inf.get(2).intValue());

                Row row4 = sheet.getRow(4);
                if (row4 == null) row4 = sheet.createRow(4);
                Cell cellB4 = row4.getCell(3); // Cột C
                if (cellB4 == null) cellB4 = row4.createCell(3);
                cellB4.setCellValue(inf.get(1));

                int startRow = 7;

                for (int i = listMD.size() - 1; i >= 0; i--) {
                    ModelDataRS d = listMD.get(i);
                    Row row = sheet.getRow(startRow);
                    if (row == null) {
                        row = sheet.createRow(startRow);
                    }

                    Cell cellA = row.getCell(1);
                    if (cellA == null) {
                        cellA = row.createCell(1);
                    }
                    cellA.setCellValue(d.getMonth());

                    Cell cellB = row.getCell(2);
                    if (cellB == null) {
                        cellB = row.createCell(2);
                    }
                    cellB.setCellValue(d.getAll());

                    Cell cellC = row.getCell(3);
                    if (cellC == null) {
                        cellC = row.createCell(3);
                    }
                    cellC.setCellValue(d.getRevenueMedicine());

                    Cell cellD = row.getCell(4);
                    if (cellD == null) {
                        cellD = row.createCell(4);
                    }
                    cellD.setCellValue(d.getRevenueMedicalS());

                    Cell cellE = row.getCell(5);
                    if (cellE == null) {
                        cellE = row.createCell(5);
                    }
                    cellE.setCellValue(d.getRevenueFunctionalFood());

                    startRow++;
                }

                try (FileOutputStream fileOut = new FileOutputStream(path)) {
                    workbook.write(fileOut);
                    JOptionPane.showMessageDialog(null, "Đã xuất báo cáo!");
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Không thể lưu file. Kiểm tra lại đường dẫn.", "Lỗi", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Lỗi khi mở file mẫu.", "Lỗi", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            } catch (NotBoundException e) {
                throw new RuntimeException(e);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Thao tác xuất báo cáo đã bị hủy");
        }
    }//GEN-LAST:event_btnXuatBaoCaoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ui.button.Button btnLamMoi;
    private ui.button.Button btnXuatBaoCao;
    private ui.combobox.Combobox cboThongKeTheo;
    private ui.chart.CurveLineChart curveLineChart1;
    private ui.datechooser.DateChooser date;
    private ui.datechooser.DateChooser dcEnd;
    private ui.datechooser.DateChooser dcStart;
    private JLabel lbCreatedNumber;
    private JLabel lbCreatedOrder;
    private JLabel lbNumberRevenue;
    private JLabel lbRevenue;
    private JLabel lbSoldNumber;
    private JLabel lbSoldProduct;
    private JLabel lbTotalProduct;
    private JLabel lbTotalProfit;
    private JLabel lbTotalRevenue;
    private JPanel pCenter;
    private ui.panel.PanelRound pCircleChart;
    private ui.panel.PanelRound pCreatedOrder;
    private ui.panel.PanelRound pLineChart;
    private ui.panel.PanelRound pRevenueNumber;
    private ui.panel.PanelRound pSoldProduct;
    private ui.panel.PanelRound pTop;
    private ui.panel.PanelRound pTotalRevenue;
    private ui.custom.PanelBarStatistical panelBarStatistical1;
    private ui.swing.progress.Progress pgsLoiNhuan;
    private ui.swing.progress.Progress pgsSanPhamBan;
    private ui.swing.progress.Progress pgsThuNhapBan;

    @Override
    public void actionPerformed(ActionEvent e) {
        Object source = e.getSource();
        OrderService orderDAO = null;
        try {
            orderDAO = (OrderService) Naming.lookup("rmi://" + staticProcess.StaticProcess.properties.get("ServerName") + ":" + staticProcess.StaticProcess.properties.get("Port") + "/orderService");
        } catch (NotBoundException ex) {
            throw new RuntimeException(ex);
        } catch (MalformedURLException ex) {
            throw new RuntimeException(ex);
        } catch (RemoteException ex) {
            throw new RuntimeException(ex);
        }
        if (source.equals(panelBarStatistical1.btnSelectStart)) {
            dcStart.showPopup();
        } else if (source.equals(panelBarStatistical1.btnSelectEnd)) {
            dcEnd.showPopup();
        }
        if (source.equals(btnLamMoi)) {
            try {
                setPgs();
            } catch (MalformedURLException ex) {
                throw new RuntimeException(ex);
            } catch (NotBoundException ex) {
                throw new RuntimeException(ex);
            } catch (RemoteException ex) {
                throw new RuntimeException(ex);
            }
            String loaiThongKe = (String) cboThongKeTheo.getSelectedItem();
            switch (loaiThongKe) {
                case "Năm":
                    setNameLineChart("BIỂU ĐỒ ĐƯỜNG THỂ HIỆN DOANH THU NĂM " + (Integer) panelBarStatistical1.ycNam.getValue());
                    try {
                        setOverView(LocalDate.of((Integer) panelBarStatistical1.ycNam.getValue(), 1, 1).atStartOfDay(), LocalDate.of((Integer) panelBarStatistical1.ycNam.getValue(), 12, 31).atTime(23, 59, 59));
                    } catch (MalformedURLException ex) {
                        throw new RuntimeException(ex);
                    } catch (NotBoundException ex) {
                        throw new RuntimeException(ex);
                    } catch (RemoteException ex) {
                        throw new RuntimeException(ex);
                    }
                    curveLineChart1.clear();
                    try {
                        setDataLineChart(orderDAO.getModelDataRSByYear((Integer) panelBarStatistical1.ycNam.getValue()));
                    } catch (RemoteException ex) {
                        throw new RuntimeException(ex);
                    }
                    break;
                case "Tháng":
                    curveLineChart1.clear();
                    String[] parts = ((String) panelBarStatistical1.cboT.getSelectedItem()).split(" ");
                    int month = 1;
                    if (parts.length > 1) {
                        month = Integer.parseInt(parts[1]);
                    }
                    LocalDate firstDayOfMonth = LocalDate.of((Integer) panelBarStatistical1.ycT.getValue(), month, 1);
                    try {
                        setOverView(firstDayOfMonth.atStartOfDay() , firstDayOfMonth.withDayOfMonth(firstDayOfMonth.lengthOfMonth()).atTime(23, 59, 59));
                    } catch (MalformedURLException ex) {
                        throw new RuntimeException(ex);
                    } catch (NotBoundException ex) {
                        throw new RuntimeException(ex);
                    } catch (RemoteException ex) {
                        throw new RuntimeException(ex);
                    }
                    setNameLineChart("BIỂU ĐỒ ĐƯỜNG THỂ HIỆN DOANH THU THÁNG " + month + " NĂM " + (Integer) panelBarStatistical1.ycT.getValue());
                    try {
                        setDataLineChart(orderDAO.getModelDataRSByYearByMonth(month, (Integer) panelBarStatistical1.ycT.getValue()));
                    } catch (RemoteException ex) {
                        throw new RuntimeException(ex);
                    }
                    break;
                case "Tùy chỉnh":
                    String start = panelBarStatistical1.txtStart.getText();
                    String end = panelBarStatistical1.txtEnd.getText();
                    curveLineChart1.clear();
                    if(checkSelect(start, end)){
                        try {
                            setOverView(convertStringToLocalDate(start).atStartOfDay(), convertStringToLocalDate(end).atTime(23, 59, 59));
                        } catch (MalformedURLException ex) {
                            throw new RuntimeException(ex);
                        } catch (NotBoundException ex) {
                            throw new RuntimeException(ex);
                        } catch (RemoteException ex) {
                            throw new RuntimeException(ex);
                        }
                        curveLineChart1.clear();
                        setNameLineChart("BIỂU ĐỒ ĐƯỜNG THỂ HIỆN DOANH THU TỪ " + convertDateFormat(start) + " ĐẾN " + convertDateFormat(end));
                        try {
                            setDataLineChart(orderDAO.getModelDataRSByYearByTime(convertStringToLocalDate(start).atStartOfDay(), convertStringToLocalDate(end).atTime(23, 59, 59)));
                        } catch (RemoteException ex) {
                            throw new RuntimeException(ex);
                        }
                    } else{
                        curveLineChart1.clear();
                    }
                    break;
            }
        }
    }

    //Kiểm tra thời gian thống kê tùy chỉnh
    public static boolean checkSelect(String start, String end) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        try {
            Date startDate = dateFormat.parse(start);
            Date endDate = dateFormat.parse(end);
            if (endDate.before(startDate)) {
                JOptionPane.showMessageDialog(null, "Lỗi: Thời gian thời gian bắt đầu phải trước thời gian kết thúc thống kê!");
                return false;
            }

            long diffInMillies = endDate.getTime() - startDate.getTime();
            long diffInDays = diffInMillies / (1000 * 60 * 60 * 24);

            if (diffInDays > 30) {
                JOptionPane.showMessageDialog(null, "Thời gian thống kê tùy chỉnh chỉ cho phép thống kê tối đa 30 ngày");
                return false;
            }
            return true;
        } catch (ParseException e) {
            e.printStackTrace();
            return false;
        }
    }

    //Chuyển định dạng dd-mm-yyyy thành yyyy-mm-dd
    public static String convertDateFormat(String inputDate) {
        SimpleDateFormat inputFormat = new SimpleDateFormat("dd-MM-yyyy");
        SimpleDateFormat outputFormat = new SimpleDateFormat("yyyy-MM-dd");
        try {
            Date date = inputFormat.parse(inputDate);
            return outputFormat.format(date);
        } catch (ParseException e) {
            e.printStackTrace();
            return null;
        }
    }

    public void setOverView(LocalDateTime startD, LocalDateTime endD) throws MalformedURLException, NotBoundException, RemoteException {
        ArrayList<Double> inf = ((OrderService)Naming.lookup("rmi://" + staticProcess.StaticProcess.properties.get("ServerName") + ":" + staticProcess.StaticProcess.properties.get("Port") + "/orderService")).getOverviewStatistical(startD, endD);
        lbCreatedNumber.setText(inf.get(0).intValue() + "");
        lbSoldNumber.setText(inf.get(2).intValue() + "");
        lbNumberRevenue.setText( formatCurrency(inf.get(1)));
    }

    //Chuyển định dạng tiền
    public static String formatCurrency(double amount) {
        DecimalFormat df = new DecimalFormat("#,###.###");
        if (amount >= 1000) {
            return df.format(amount / 1000) + "K";
        }
        return df.format(amount);
    }

    //Chuyển dd-mm-yyyy về kiểu LocalDate
    public static LocalDate convertStringToLocalDate(String dateString) throws DateTimeParseException {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        return LocalDate.parse(dateString, formatter);
    }

    //Set biểu đồ tròn tỷ lệ
    public void setPgs() throws MalformedURLException, NotBoundException, RemoteException {
        OrderService orderDAO = (OrderService) Naming.lookup("rmi://" + staticProcess.StaticProcess.properties.get("ServerName") + ":" + staticProcess.StaticProcess.properties.get("Port") + "/orderService");
        pgsSanPhamBan.setValue((int) Math.round(orderDAO.getTotalProductsSold()));
        pgsThuNhapBan.setValue((int) Math.round(orderDAO.getRevenueSoldPercentage()));
        pgsLoiNhuan.setValue((int) Math.round(orderDAO.getProfit()));

        pgsSanPhamBan.start();
        pgsThuNhapBan.start();
        pgsLoiNhuan.start();
    }

    //Hàm chạy hiệu ứng animation
    public void startAnimation(){
        pgsSanPhamBan.start();
        pgsThuNhapBan.start();
        pgsLoiNhuan.start();
        curveLineChart1.start();
    }
}
